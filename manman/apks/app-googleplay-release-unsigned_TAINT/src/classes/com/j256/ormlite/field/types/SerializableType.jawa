record `com.j256.ormlite.field.types.SerializableType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.SerializableType` `@@com.j256.ormlite.field.types.SerializableType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/SerializableType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L153a8c.  v0:= new `com.j256.ormlite.field.types.SerializableType`;
  #L153a90.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/SerializableType;.<init>:()V` @kind direct;
  #L153a96.  `@@com.j256.ormlite.field.types.SerializableType.singleTon` @type ^`com.j256.ormlite.field.types.SerializableType` := v0 @kind object;
  #L153a9a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.SerializableType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SerializableType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L153aac.  v0:= `@@com.j256.ormlite.field.SqlType.SERIALIZABLE` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L153ab0.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L153ab6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.SerializableType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/SerializableType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L153ac8.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L153ace.  return @kind void;
}
procedure `com.j256.ormlite.field.types.SerializableType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/SerializableType;.getSingleton:()Lcom/j256/ormlite/field/types/SerializableType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L153ae0.  v0:= `@@com.j256.ormlite.field.types.SerializableType.singleTon` @type ^`com.j256.ormlite.field.types.SerializableType` @kind object;
  #L153ae4.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.SerializableType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SerializableType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153af8.  v0:= constclass @type ^`java.io.Serializable` @kind object;
  #L153afc.  return v0 @kind object;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.SerializableType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SerializableType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153b10.  v0:= 0I;
  #L153b12.  return v0;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.SerializableType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SerializableType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153b24.  v0:= 1I;
  #L153b26.  return v0;
}
procedure `boolean` `isComparable`(`com.j256.ormlite.field.types.SerializableType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SerializableType;.isComparable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153b38.  v0:= 0I;
  #L153b3a.  return v0;
}
procedure `boolean` `isStreamType`(`com.j256.ormlite.field.types.SerializableType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SerializableType;.isStreamType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153b4c.  v0:= 1I;
  #L153b4e.  return v0;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.SerializableType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/SerializableType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L153b60.  v0:= constclass @type ^`java.io.Serializable` @kind object;
  #L153b64.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L153b6a.  v1:= temp @kind object;
  #L153b6c.  call temp:= `isAssignableFrom`(v0, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L153b72.  v0:= temp;
  #L153b74.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.SerializableType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/SerializableType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L153b88.  v1:= 0I;
  #Try_start0.  
  #L153b8a.  v0:= new `java.io.ByteArrayOutputStream`;
  #L153b8e.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L153b94.  v2:= new `java.io.ObjectOutputStream`;
  #L153b98.  call `<init>`(v2, v0) @signature `Ljava/io/ObjectOutputStream;.<init>:(Ljava/io/OutputStream;)V` @kind direct;
  #Try_end0.  
  #Try_start1.  
  #L153b9e.  call `writeObject`(v2, v6) @signature `Ljava/io/ObjectOutputStream;.writeObject:(Ljava/lang/Object;)V` @kind virtual;
  #L153ba4.  call `close`(v2) @signature `Ljava/io/ObjectOutputStream;.close:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L153baa.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #Try_end2.  
  #L153bb0.  v0:= temp @kind object;
  #L153bb2.  call `closeQuietly`(v1) @signature `Lcom/j256/ormlite/misc/IOUtils;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L153bb8.  return v0 @kind object;
  #L153bba.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #Try_start3.  
  #L153bbc.  v2:= new `java.lang.StringBuilder`;
  #L153bc0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L153bc6.  v3:= "Could not write serialized object to byte array: " @kind object;
  #L153bca.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L153bd0.  v2:= temp @kind object;
  #L153bd2.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L153bd8.  v2:= temp @kind object;
  #L153bda.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L153be0.  v2:= temp @kind object;
  #L153be2.  call temp:= `create`(v2, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L153be8.  v0:= temp @kind object;
  #L153bea.  throw v0;
  #Try_end3.  
  #L153bec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L153bee.  call `closeQuietly`(v1) @signature `Lcom/j256/ormlite/misc/IOUtils;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L153bf4.  throw v0;
  #L153bf6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L153bf8.  v1:= v2 @kind object;
  #L153bfa.  goto L153bee;
  #L153bfc.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L153bfe.  v1:= v2 @kind object;
  #L153c00.  goto L153bbc;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L153bba;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L153bec;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L153bfc;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L153bf6;
  catch `java.lang.Exception` @[Try_start2..Try_end2] goto L153bba;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L153bec;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L153bec;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.SerializableType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/SerializableType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L153c44.  v0:= new `java.sql.SQLException`;
  #L153c48.  v1:= "Default values for serializable types are not supported" @kind object;
  #L153c4c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L153c52.  throw v0;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.SerializableType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/SerializableType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L153c64.  v0:= new `java.sql.SQLException`;
  #L153c68.  v1:= "Serializable type cannot be converted from string to Java" @kind object;
  #L153c6c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L153c72.  throw v0;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.SerializableType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/SerializableType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153c84.  call temp:= `getBytes`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getBytes:(I)[B` @kind interface;
  #L153c8a.  v0:= temp @kind object;
  #L153c8c.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.SerializableType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/SerializableType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L153ca0.  v6:= (`byte`[]) v6 @kind object;
  #L153ca4.  v6:= (`byte`[]) v6 @kind object;
  #L153ca8.  v2:= 0I;
  #Try_start0.  
  #L153caa.  v1:= new `java.io.ObjectInputStream`;
  #L153cae.  v0:= new `java.io.ByteArrayInputStream`;
  #L153cb2.  call `<init>`(v0, v6) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L153cb8.  call `<init>`(v1, v0) @signature `Ljava/io/ObjectInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #Try_end0.  
  #Try_start1.  
  #L153cbe.  call temp:= `readObject`(v1) @signature `Ljava/io/ObjectInputStream;.readObject:()Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L153cc4.  v0:= temp @kind object;
  #L153cc6.  call `closeQuietly`(v1) @signature `Lcom/j256/ormlite/misc/IOUtils;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L153ccc.  return v0 @kind object;
  #L153cce.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L153cd0.  v1:= v2 @kind object;
  #Try_start2.  
  #L153cd2.  v2:= new `java.lang.StringBuilder`;
  #L153cd6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L153cdc.  v3:= "Could not read serialized object from byte array: " @kind object;
  #L153ce0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L153ce6.  v2:= temp @kind object;
  #L153ce8.  call temp:= `toString`(v6) @signature `Ljava/util/Arrays;.toString:([B)Ljava/lang/String;` @kind static;
  #L153cee.  v3:= temp @kind object;
  #L153cf0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L153cf6.  v2:= temp @kind object;
  #L153cf8.  v3:= "(len " @kind object;
  #L153cfc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L153d02.  v2:= temp @kind object;
  #L153d04.  v3:= length @variable v6;
  #L153d06.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L153d0c.  v2:= temp @kind object;
  #L153d0e.  v3:= ")" @kind object;
  #L153d12.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L153d18.  v2:= temp @kind object;
  #L153d1a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L153d20.  v2:= temp @kind object;
  #L153d22.  call temp:= `create`(v2, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L153d28.  v0:= temp @kind object;
  #L153d2a.  throw v0;
  #Try_end2.  
  #L153d2c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L153d2e.  call `closeQuietly`(v1) @signature `Lcom/j256/ormlite/misc/IOUtils;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L153d34.  throw v0;
  #L153d36.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L153d38.  v1:= v2 @kind object;
  #L153d3a.  goto L153d2e;
  #L153d3c.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L153d3e.  goto L153cd2;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L153cce;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L153d36;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L153d3c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L153d2c;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L153d2c;
}
