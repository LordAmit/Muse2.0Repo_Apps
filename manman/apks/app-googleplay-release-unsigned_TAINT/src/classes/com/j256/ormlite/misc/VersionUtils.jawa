record `com.j256.ormlite.misc.VersionUtils` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.j256.ormlite.misc.VersionUtils.CORE_VERSION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @AccessFlag PRIVATE_STATIC;
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.misc.VersionUtils.logger` @AccessFlag PRIVATE_STATIC;
global `boolean` `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L156e34.  v0:= 0I;
  #L156e36.  `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` := v0 @kind boolean;
  #L156e3a.  v0:= "VERSION__5.0__" @kind object;
  #L156e3e.  `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` := v0 @kind object;
  #L156e42.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.misc.VersionUtils` v0 @kind this) @signature `Lcom/j256/ormlite/misc/VersionUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L156e54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L156e5a.  return @kind void;
}
procedure `void` `checkCoreVersusAndroidVersions`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.checkCoreVersusAndroidVersions:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L156e6c.  v0:= "core" @kind object;
  #L156e70.  v1:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L156e74.  v2:= "android" @kind object;
  #L156e78.  call `logVersionWarnings`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L156e7e.  return @kind void;
}
procedure `void` `checkCoreVersusJdbcVersions`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.checkCoreVersusJdbcVersions:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L156e90.  v0:= "core" @kind object;
  #L156e94.  v1:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L156e98.  v2:= "jdbc" @kind object;
  #L156e9c.  call `logVersionWarnings`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L156ea2.  return @kind void;
}
procedure `java.lang.String` `getCoreVersion`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getCoreVersion:()Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L156eb4.  v0:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L156eb8.  return v0 @kind object;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getLogger:()Lcom/j256/ormlite/logger/Logger;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L156ecc.  v0:= `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L156ed0.  if v0 != 0 then goto L156ee4;
  #L156ed4.  v0:= constclass @type ^`com.j256.ormlite.misc.VersionUtils` @kind object;
  #L156ed8.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L156ede.  v0:= temp @kind object;
  #L156ee0.  `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L156ee4.  v0:= `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L156ee8.  return v0 @kind object;
}
procedure `void` `logVersionWarnings`(`java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `java.lang.String` v11 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L156efc.  v7:= 0I;
  #L156efe.  v6:= 3I;
  #L156f00.  v5:= 2I;
  #L156f02.  v4:= 1I;
  #L156f04.  v3:= 0I;
  #L156f06.  if v9 != 0 then goto L156f2e;
  #L156f0a.  if v11 == 0 then goto L156f2c;
  #L156f0e.  v0:= "Unknown version" @kind object;
  #L156f12.  v1:= " for {}, version for {} is '{}'" @kind object;
  #L156f16.  v2:= new `java.lang.Object`[v6];
  #L156f1a.  v2[v3]:= v8 @kind object;
  #L156f1e.  v2[v4]:= v10 @kind object;
  #L156f22.  v2[v5]:= v11 @kind object;
  #L156f26.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L156f2c.  return @kind void;
  #L156f2e.  if v11 != 0 then goto L156f52;
  #L156f32.  v0:= "Unknown version" @kind object;
  #L156f36.  v1:= " for {}, version for {} is '{}'" @kind object;
  #L156f3a.  v2:= new `java.lang.Object`[v6];
  #L156f3e.  v2[v3]:= v10 @kind object;
  #L156f42.  v2[v4]:= v8 @kind object;
  #L156f46.  v2[v5]:= v9 @kind object;
  #L156f4a.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L156f50.  goto L156f2c;
  #L156f52.  call temp:= `equals`(v9, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L156f58.  v0:= temp;
  #L156f5a.  if v0 != 0 then goto L156f2c;
  #L156f5e.  v0:= "Mismatched versions" @kind object;
  #L156f62.  v1:= ": {} is '{}', while {} is '{}'" @kind object;
  #L156f66.  v2:= 4I;
  #L156f68.  v2:= new `java.lang.Object`[v2];
  #L156f6c.  v2[v3]:= v8 @kind object;
  #L156f70.  v2[v4]:= v9 @kind object;
  #L156f74.  v2[v5]:= v10 @kind object;
  #L156f78.  v2[v6]:= v11 @kind object;
  #L156f7c.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L156f82.  goto L156f2c;
}
procedure `void` `setThrownOnErrors`(`boolean` v0 ) @signature `Lcom/j256/ormlite/misc/VersionUtils;.setThrownOnErrors:(Z)V` @AccessFlag STATIC {
    temp;

  #L156f94.  `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` := v0 @kind boolean;
  #L156f98.  return @kind void;
}
procedure `void` `warning`(`java.lang.Throwable` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L156fac.  call temp:= `getLogger`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getLogger:()Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L156fb2.  v0:= temp @kind object;
  #L156fb4.  v1:= new `java.lang.StringBuilder`;
  #L156fb8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L156fbe.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L156fc4.  v1:= temp @kind object;
  #L156fc6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L156fcc.  v1:= temp @kind object;
  #L156fce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L156fd4.  v1:= temp @kind object;
  #L156fd6.  call `warn`(v0, v3, v1, v6) @signature `Lcom/j256/ormlite/logger/Logger;.warn:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L156fdc.  v0:= `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` @kind boolean;
  #L156fe0.  if v0 == 0 then goto L157016;
  #L156fe4.  v0:= new `java.lang.IllegalStateException`;
  #L156fe8.  v1:= new `java.lang.StringBuilder`;
  #L156fec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L156ff2.  v2:= "See error log for details:" @kind object;
  #L156ff6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L156ffc.  v1:= temp @kind object;
  #L156ffe.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157004.  v1:= temp @kind object;
  #L157006.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15700c.  v1:= temp @kind object;
  #L15700e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157014.  throw v0;
  #L157016.  return @kind void;
}
