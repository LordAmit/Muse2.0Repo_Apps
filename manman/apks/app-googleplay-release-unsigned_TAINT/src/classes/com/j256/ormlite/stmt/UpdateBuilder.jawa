record `com.j256.ormlite.stmt.UpdateBuilder` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.StatementBuilder` @kind class {
  `java.util.List` `com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `com.j256.ormlite.db.DatabaseType` v2 @kind object, `com.j256.ormlite.table.TableInfo` v3 @kind object, `com.j256.ormlite.dao.Dao` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b148.  v0:= `@@com.j256.ormlite.stmt.StatementBuilder$StatementType.UPDATE` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L15b14c.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)V` @kind direct;
  #L15b152.  v0:= 0I;
  #L15b154.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L15b158.  return @kind void;
}
procedure `void` `addUpdateColumnToList`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.String` v2 @kind object, `com.j256.ormlite.stmt.query.Clause` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15b16c.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L15b170.  if v0 != 0 then goto L15b182;
  #L15b174.  v0:= new `java.util.ArrayList`;
  #L15b178.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L15b17e.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L15b182.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L15b186.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15b18c.  return @kind void;
}
procedure `void` `appendStatementEnd`(`com.j256.ormlite.stmt.UpdateBuilder` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.appendStatementEnd:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;

  #L15b1a0.  return @kind void;
}
procedure `void` `appendStatementStart`(`com.j256.ormlite.stmt.UpdateBuilder` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.appendStatementStart:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15b1b4.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L15b1b8.  if v0 == 0 then goto L15b1cc;
  #L15b1bc.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L15b1c0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L15b1c6.  v0:= temp;
  #L15b1c8.  if v0 == 0 then goto L15b1dc;
  #L15b1cc.  v0:= new `java.lang.IllegalArgumentException`;
  #L15b1d0.  v1:= "UPDATE statements must have at least one SET column" @kind object;
  #L15b1d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b1da.  throw v0;
  #L15b1dc.  v0:= "UPDATE " @kind object;
  #L15b1e0.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b1e6.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L15b1ea.  v1:= v5.`com.j256.ormlite.stmt.UpdateBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L15b1ee.  call temp:= `getTableName`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L15b1f4.  v1:= temp @kind object;
  #L15b1f6.  call `appendEscapedEntityName`(v0, v6, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15b1fc.  v0:= " SET " @kind object;
  #L15b200.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b206.  v0:= 1I;
  #L15b208.  v1:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L15b20c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15b212.  v2:= temp @kind object;
  #L15b214.  v1:= v0;
  #L15b216.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15b21c.  v0:= temp;
  #L15b21e.  if v0 == 0 then goto L15b24e;
  #L15b222.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15b228.  v0:= temp @kind object;
  #L15b22a.  v0:= (`com.j256.ormlite.stmt.query.Clause`) v0 @kind object;
  #L15b22e.  if v1 == 0 then goto L15b242;
  #L15b232.  v1:= 0I;
  #L15b234.  v3:= v5.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L15b238.  v4:= 0I;
  #L15b23a.  call `appendSql`(v0, v3, v4, v6, v7) @signature `Lcom/j256/ormlite/stmt/query/Clause;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind interface;
  #L15b240.  goto L15b216;
  #L15b242.  v3:= 44I;
  #L15b246.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b24c.  goto L15b234;
  #L15b24e.  return @kind void;
}
procedure `java.lang.String` `escapeColumnName`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeColumnName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b260.  v0:= new `java.lang.StringBuilder`;
  #L15b264.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15b26a.  v1:= temp;
  #L15b26c.  v1:= v1 + 4;
  #L15b270.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15b276.  v1:= v2.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L15b27a.  call `appendEscapedEntityName`(v1, v0, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15b280.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b286.  v0:= temp @kind object;
  #L15b288.  return v0 @kind object;
}
procedure `void` `escapeColumnName`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeColumnName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b29c.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L15b2a0.  call `appendEscapedEntityName`(v0, v2, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15b2a6.  return @kind void;
}
procedure `java.lang.String` `escapeValue`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeValue:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b2b8.  v0:= new `java.lang.StringBuilder`;
  #L15b2bc.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15b2c2.  v1:= temp;
  #L15b2c4.  v1:= v1 + 4;
  #L15b2c8.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15b2ce.  v1:= v2.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L15b2d2.  call `appendEscapedWord`(v1, v0, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15b2d8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b2de.  v0:= temp @kind object;
  #L15b2e0.  return v0 @kind object;
}
procedure `void` `escapeValue`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeValue:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b2f4.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L15b2f8.  call `appendEscapedWord`(v0, v2, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15b2fe.  return @kind void;
}
procedure `com.j256.ormlite.stmt.PreparedUpdate` `prepare`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.prepare:()Lcom/j256/ormlite/stmt/PreparedUpdate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b310.  v0:= 0I;
  #L15b312.  v1:= 0I;
  #L15b314.  call temp:= `prepareStatement`(v2, v0, v1) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatement:(Ljava/lang/Long;Z)Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;` @kind super;
  #L15b31a.  v0:= temp @kind object;
  #L15b31c.  return v0 @kind object;
}
procedure `void` `reset`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b330.  call `reset`(v1) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.reset:()V` @kind super;
  #L15b336.  v0:= 0I;
  #L15b338.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L15b33c.  return @kind void;
}
procedure `int` `update`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.update:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b350.  v0:= v2.`com.j256.ormlite.stmt.UpdateBuilder.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L15b354.  call temp:= `prepare`(v2) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.prepare:()Lcom/j256/ormlite/stmt/PreparedUpdate;` @kind virtual;
  #L15b35a.  v1:= temp @kind object;
  #L15b35c.  call temp:= `update`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.update:(Lcom/j256/ormlite/stmt/PreparedUpdate;)I` @kind interface;
  #L15b362.  v0:= temp;
  #L15b364.  return v0;
}
procedure `com.j256.ormlite.stmt.UpdateBuilder` `updateColumnExpression`(`com.j256.ormlite.stmt.UpdateBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.updateColumnExpression:(Ljava/lang/String;Ljava/lang/String;)Lcom/j256/ormlite/stmt/UpdateBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b378.  call temp:= `verifyColumnName`(v3, v4) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15b37e.  v0:= temp @kind object;
  #L15b380.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L15b386.  v1:= temp;
  #L15b388.  if v1 == 0 then goto L15b3be;
  #L15b38c.  v0:= new `java.sql.SQLException`;
  #L15b390.  v1:= new `java.lang.StringBuilder`;
  #L15b394.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b39a.  v2:= "Can't update foreign colletion field: " @kind object;
  #L15b39e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b3a4.  v1:= temp @kind object;
  #L15b3a6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b3ac.  v1:= temp @kind object;
  #L15b3ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b3b4.  v1:= temp @kind object;
  #L15b3b6.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b3bc.  throw v0;
  #L15b3be.  v1:= new `com.j256.ormlite.stmt.query.SetExpression`;
  #L15b3c2.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/j256/ormlite/stmt/query/SetExpression;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @kind direct;
  #L15b3c8.  call `addUpdateColumnToList`(v3, v4, v1) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @kind direct;
  #L15b3ce.  return v3 @kind object;
}
procedure `com.j256.ormlite.stmt.UpdateBuilder` `updateColumnValue`(`com.j256.ormlite.stmt.UpdateBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.updateColumnValue:(Ljava/lang/String;Ljava/lang/Object;)Lcom/j256/ormlite/stmt/UpdateBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b3e0.  call temp:= `verifyColumnName`(v3, v4) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15b3e6.  v0:= temp @kind object;
  #L15b3e8.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L15b3ee.  v1:= temp;
  #L15b3f0.  if v1 == 0 then goto L15b426;
  #L15b3f4.  v0:= new `java.sql.SQLException`;
  #L15b3f8.  v1:= new `java.lang.StringBuilder`;
  #L15b3fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b402.  v2:= "Can't update foreign colletion field: " @kind object;
  #L15b406.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b40c.  v1:= temp @kind object;
  #L15b40e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b414.  v1:= temp @kind object;
  #L15b416.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b41c.  v1:= temp @kind object;
  #L15b41e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b424.  throw v0;
  #L15b426.  v1:= new `com.j256.ormlite.stmt.query.SetValue`;
  #L15b42a.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/j256/ormlite/stmt/query/SetValue;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @kind direct;
  #L15b430.  call `addUpdateColumnToList`(v3, v4, v1) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @kind direct;
  #L15b436.  return v3 @kind object;
}
