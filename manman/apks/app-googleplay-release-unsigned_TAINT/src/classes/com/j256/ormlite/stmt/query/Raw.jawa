record `com.j256.ormlite.stmt.query.Raw` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.Clause` @kind interface {
  `com.j256.ormlite.stmt.ArgumentHolder`[] `com.j256.ormlite.stmt.query.Raw.args` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.j256.ormlite.stmt.query.Raw.statement` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Raw` v0 @kind this, `java.lang.String` v1 @kind object, `com.j256.ormlite.stmt.ArgumentHolder`[] v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Raw;.<init>:(Ljava/lang/String;[Lcom/j256/ormlite/stmt/ArgumentHolder;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15eb1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15eb22.  v0.`com.j256.ormlite.stmt.query.Raw.statement` @type ^`java.lang.String` := v1 @kind object;
  #L15eb26.  v0.`com.j256.ormlite.stmt.query.Raw.args` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] := v2 @kind object;
  #L15eb2a.  return @kind void;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.Raw` v4 @kind this, `com.j256.ormlite.db.DatabaseType` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.StringBuilder` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Raw;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15eb3c.  v0:= v4.`com.j256.ormlite.stmt.query.Raw.statement` @type ^`java.lang.String` @kind object;
  #L15eb40.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb46.  v0:= 32I;
  #L15eb4a.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb50.  v1:= v4.`com.j256.ormlite.stmt.query.Raw.args` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15eb54.  v2:= length @variable v1;
  #L15eb56.  v0:= 0I;
  #L15eb58.  if v0 >= v2 then goto L15eb6c;
  #L15eb5c.  v3:= v1[v0] @kind object;
  #L15eb60.  call temp:= `add`(v8, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15eb66.  v0:= v0 + 1;
  #L15eb6a.  goto L15eb58;
  #L15eb6c.  return @kind void;
}
