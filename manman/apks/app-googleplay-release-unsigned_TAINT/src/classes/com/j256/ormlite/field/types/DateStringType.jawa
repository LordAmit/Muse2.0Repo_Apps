record `com.j256.ormlite.field.types.DateStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDateType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.DateStringType` `@@com.j256.ormlite.field.types.DateStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15238c.  v0:= 50I;
  #L152390.  `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L152394.  v0:= new `com.j256.ormlite.field.types.DateStringType`;
  #L152398.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:()V` @kind direct;
  #L15239e.  `@@com.j256.ormlite.field.types.DateStringType.singleTon` @type ^`com.j256.ormlite.field.types.DateStringType` := v0 @kind object;
  #L1523a2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1523b4.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L1523b8.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L1523be.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1523d0.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L1523d6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1523e8.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L1523ee.  return @kind void;
}
procedure `com.j256.ormlite.field.types.DateStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateStringType;.getSingleton:()Lcom/j256/ormlite/field/types/DateStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L152400.  v0:= `@@com.j256.ormlite.field.types.DateStringType.singleTon` @type ^`com.j256.ormlite.field.types.DateStringType` @kind object;
  #L152404.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152418.  v0:= `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @type ^`int`;
  #L15241c.  return v0;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152430.  v0:= constclass @type ^`byte`[] @kind object;
  #L152434.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152448.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L15244c.  call temp:= `convertDateStringConfig`(v2, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L152452.  v0:= temp @kind object;
  #L152454.  call temp:= `getDateFormat`(v0) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L15245a.  v0:= temp @kind object;
  #L15245c.  v3:= (`java.util.Date`) v3 @kind object;
  #L152460.  call temp:= `format`(v0, v3) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L152466.  v0:= temp @kind object;
  #L152468.  return v0 @kind object;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.DateStringType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15247c.  call temp:= `getFormat`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L152482.  v1:= temp @kind object;
  #L152484.  if v1 != 0 then goto L15248e;
  #L152488.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L15248c.  return v0 @kind object;
  #L15248e.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L152492.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L152498.  goto L15248c;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1524ac.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L1524b0.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L1524b6.  v0:= temp @kind object;
  #Try_start0.  
  #L1524b8.  call temp:= `normalizeDateString`(v0, v6) @signature `Lcom/j256/ormlite/field/types/DateStringType;.normalizeDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #Try_end0.  
  #L1524be.  v0:= temp @kind object;
  #L1524c0.  return v0 @kind object;
  #L1524c2.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L1524c4.  v2:= new `java.lang.StringBuilder`;
  #L1524c8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1524ce.  v3:= "Problems with field " @kind object;
  #L1524d2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1524d8.  v2:= temp @kind object;
  #L1524da.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1524e0.  v2:= temp @kind object;
  #L1524e2.  v3:= " parsing default date-string '" @kind object;
  #L1524e6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1524ec.  v2:= temp @kind object;
  #L1524ee.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1524f4.  v2:= temp @kind object;
  #L1524f6.  v3:= "' using '" @kind object;
  #L1524fa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L152500.  v2:= temp @kind object;
  #L152502.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L152508.  v0:= temp @kind object;
  #L15250a.  v2:= "'" @kind object;
  #L15250e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L152514.  v0:= temp @kind object;
  #L152516.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15251c.  v0:= temp @kind object;
  #L15251e.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L152524.  v0:= temp @kind object;
  #L152526.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L1524c2;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152548.  call temp:= `sqlArgToJava`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L15254e.  v0:= temp @kind object;
  #L152550.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152564.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L15256a.  v0:= temp @kind object;
  #L15256c.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L152580.  v6:= (`java.lang.String`) v6 @kind object;
  #L152584.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L152588.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L15258e.  v0:= temp @kind object;
  #Try_start0.  
  #L152590.  call temp:= `parseDateString`(v0, v6) @signature `Lcom/j256/ormlite/field/types/DateStringType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #Try_end0.  
  #L152596.  v0:= temp @kind object;
  #L152598.  return v0 @kind object;
  #L15259a.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L15259c.  v2:= new `java.lang.StringBuilder`;
  #L1525a0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1525a6.  v3:= "Problems with column " @kind object;
  #L1525aa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1525b0.  v2:= temp @kind object;
  #L1525b2.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1525b8.  v2:= temp @kind object;
  #L1525ba.  v3:= " parsing date-string '" @kind object;
  #L1525be.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1525c4.  v2:= temp @kind object;
  #L1525c6.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1525cc.  v2:= temp @kind object;
  #L1525ce.  v3:= "' using '" @kind object;
  #L1525d2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1525d8.  v2:= temp @kind object;
  #L1525da.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1525e0.  v0:= temp @kind object;
  #L1525e2.  v2:= "'" @kind object;
  #L1525e6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1525ec.  v0:= temp @kind object;
  #L1525ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1525f4.  v0:= temp @kind object;
  #L1525f6.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1525fc.  v0:= temp @kind object;
  #L1525fe.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L15259a;
}
