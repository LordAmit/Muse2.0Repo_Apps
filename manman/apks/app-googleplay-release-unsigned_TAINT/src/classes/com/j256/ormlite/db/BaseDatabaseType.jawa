record `com.j256.ormlite.db.BaseDatabaseType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.db.DatabaseType` @kind interface {
  `java.sql.Driver` `com.j256.ormlite.db.BaseDatabaseType.driver` @AccessFlag PROTECTED;
}
global `java.lang.String` `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @AccessFlag PROTECTED_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L14ac8c.  v0:= "_id_seq" @kind object;
  #L14ac90.  `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @type ^`java.lang.String` := v0 @kind object;
  #L14ac94.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L14aca8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14acae.  return @kind void;
}
procedure `void` `addSingleUnique`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addSingleUnique:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L14acc0.  v0:= new `java.lang.StringBuilder`;
  #L14acc4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14acca.  v1:= " UNIQUE (" @kind object;
  #L14acce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14acd4.  call temp:= `getColumnName`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L14acda.  v1:= temp @kind object;
  #L14acdc.  call `appendEscapedEntityName`(v2, v0, v1) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L14ace2.  v1:= 41I;
  #L14ace6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14acec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14acf2.  v0:= temp @kind object;
  #L14acf4.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14acfa.  return @kind void;
}
procedure `void` `appendCanBeNull`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCanBeNull:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PRIVATE {
    temp;

  #L14ad0c.  return @kind void;
}
procedure `void` `appendDefaultValue`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDefaultValue:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14ad20.  call temp:= `isEscapedDefaultValue`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedDefaultValue:()Z` @kind virtual;
  #L14ad26.  v0:= temp;
  #L14ad28.  if v0 == 0 then goto L14ad3c;
  #L14ad2c.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ad32.  v0:= temp @kind object;
  #L14ad34.  call `appendEscapedWord`(v1, v2, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L14ad3a.  return @kind void;
  #L14ad3c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ad42.  goto L14ad3a;
}
procedure `void` `appendDoubleType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDoubleType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14ad54.  v0:= "DOUBLE PRECISION" @kind object;
  #L14ad58.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ad5e.  return @kind void;
}
procedure `void` `appendFloatType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendFloatType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14ad70.  v0:= "FLOAT" @kind object;
  #L14ad74.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ad7a.  return @kind void;
}
procedure `void` `appendIntegerType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendIntegerType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14ad8c.  v0:= "INTEGER" @kind object;
  #L14ad90.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ad96.  return @kind void;
}
procedure `void` `addPrimaryKeySql`(`com.j256.ormlite.db.BaseDatabaseType` v6 @kind this, `com.j256.ormlite.field.FieldType`[] v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addPrimaryKeySql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14ada8.  v1:= 0I;
  #L14adaa.  v2:= length @variable v7;
  #L14adac.  v0:= 0I;
  #L14adae.  v5:= v0;
  #L14adb0.  v0:= v1 @kind object;
  #L14adb2.  v1:= v5;
  #L14adb4.  if v1 >= v2 then goto L14ae2a;
  #L14adb8.  v3:= v7[v1] @kind object;
  #L14adbc.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L14adc2.  v4:= temp;
  #L14adc4.  if v4 == 0 then goto L14ade6;
  #L14adc8.  call temp:= `generatedIdSqlAtEnd`(v6) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generatedIdSqlAtEnd:()Z` @kind virtual;
  #L14adce.  v4:= temp;
  #L14add0.  if v4 != 0 then goto L14ade6;
  #L14add4.  call temp:= `isSelfGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L14adda.  v4:= temp;
  #L14addc.  if v4 != 0 then goto L14ade6;
  #L14ade0.  v1:= v1 + 1;
  #L14ade4.  goto L14adb4;
  #L14ade6.  call temp:= `isId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L14adec.  v4:= temp;
  #L14adee.  if v4 == 0 then goto L14ade0;
  #L14adf2.  if v0 != 0 then goto L14ae1e;
  #L14adf6.  v0:= new `java.lang.StringBuilder`;
  #L14adfa.  v4:= 48I;
  #L14adfe.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L14ae04.  v4:= "PRIMARY KEY (" @kind object;
  #L14ae08.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ae0e.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L14ae14.  v3:= temp @kind object;
  #L14ae16.  call `appendEscapedEntityName`(v6, v0, v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L14ae1c.  goto L14ade0;
  #L14ae1e.  v4:= 44I;
  #L14ae22.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ae28.  goto L14ae0e;
  #L14ae2a.  if v0 == 0 then goto L14ae46;
  #L14ae2e.  v1:= ") " @kind object;
  #L14ae32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ae38.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ae3e.  v0:= temp @kind object;
  #L14ae40.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14ae46.  return @kind void;
}
procedure `void` `addUniqueComboSql`(`com.j256.ormlite.db.BaseDatabaseType` v6 @kind this, `com.j256.ormlite.field.FieldType`[] v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addUniqueComboSql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14ae58.  v1:= 0I;
  #L14ae5a.  v2:= length @variable v7;
  #L14ae5c.  v0:= 0I;
  #L14ae5e.  v5:= v0;
  #L14ae60.  v0:= v1 @kind object;
  #L14ae62.  v1:= v5;
  #L14ae64.  if v1 >= v2 then goto L14aeb4;
  #L14ae68.  v3:= v7[v1] @kind object;
  #L14ae6c.  call temp:= `isUniqueCombo`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isUniqueCombo:()Z` @kind virtual;
  #L14ae72.  v4:= temp;
  #L14ae74.  if v4 == 0 then goto L14aea2;
  #L14ae78.  if v0 != 0 then goto L14aea8;
  #L14ae7c.  v0:= new `java.lang.StringBuilder`;
  #L14ae80.  v4:= 48I;
  #L14ae84.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L14ae8a.  v4:= "UNIQUE (" @kind object;
  #L14ae8e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ae94.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L14ae9a.  v3:= temp @kind object;
  #L14ae9c.  call `appendEscapedEntityName`(v6, v0, v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L14aea2.  v1:= v1 + 1;
  #L14aea6.  goto L14ae64;
  #L14aea8.  v4:= 44I;
  #L14aeac.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14aeb2.  goto L14ae94;
  #L14aeb4.  if v0 == 0 then goto L14aed0;
  #L14aeb8.  v1:= ") " @kind object;
  #L14aebc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14aec2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14aec8.  v0:= temp @kind object;
  #L14aeca.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14aed0.  return @kind void;
}
procedure `void` `appendBigDecimalNumericType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBigDecimalNumericType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14aee4.  v0:= "NUMERIC" @kind object;
  #L14aee8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14aeee.  return @kind void;
}
procedure `void` `appendBooleanType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBooleanType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14af00.  v0:= "BOOLEAN" @kind object;
  #L14af04.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14af0a.  return @kind void;
}
procedure `void` `appendByteArrayType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteArrayType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14af1c.  v0:= "BLOB" @kind object;
  #L14af20.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14af26.  return @kind void;
}
procedure `void` `appendByteType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14af38.  v0:= "TINYINT" @kind object;
  #L14af3c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14af42.  return @kind void;
}
procedure `void` `appendCharType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCharType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14af54.  v0:= "CHAR" @kind object;
  #L14af58.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14af5e.  return @kind void;
}
procedure `void` `appendColumnArg`(`com.j256.ormlite.db.BaseDatabaseType` v8 @kind this, `java.lang.String` v9 @kind object, `java.lang.StringBuilder` v10 @kind object, `com.j256.ormlite.field.FieldType` v11 @kind object, `java.util.List` v12 @kind object, `java.util.List` v13 @kind object, `java.util.List` v14 @kind object, `java.util.List` v15 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendColumnArg:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L14af70.  call temp:= `getColumnName`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L14af76.  v0:= temp @kind object;
  #L14af78.  call `appendEscapedEntityName`(v8, v10, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L14af7e.  v0:= 32I;
  #L14af82.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14af88.  call temp:= `getDataPersister`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L14af8e.  v1:= temp @kind object;
  #L14af90.  call temp:= `getWidth`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getWidth:()I` @kind virtual;
  #L14af96.  v0:= temp;
  #L14af98.  if v0 != 0 then goto L14afa4;
  #L14af9c.  call temp:= `getDefaultWidth`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getDefaultWidth:()I` @kind interface;
  #L14afa2.  v0:= temp;
  #L14afa4.  v2:= `@@com.j256.ormlite.db.BaseDatabaseType$1.$SwitchMap$com$j256$ormlite$field$SqlType` @type ^`int`[] @kind object;
  #L14afa8.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L14afae.  v3:= temp @kind object;
  #L14afb0.  call temp:= `ordinal`(v3) @signature `Lcom/j256/ormlite/field/SqlType;.ordinal:()I` @kind virtual;
  #L14afb6.  v3:= temp;
  #L14afb8.  v2:= v2[v3];
  #L14afbc.  goto L14b174;
  #L14afc2.  v0:= new `java.lang.IllegalArgumentException`;
  #L14afc6.  v2:= new `java.lang.StringBuilder`;
  #L14afca.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14afd0.  v3:= "Unknown SQL-type " @kind object;
  #L14afd4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14afda.  v2:= temp @kind object;
  #L14afdc.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L14afe2.  v1:= temp @kind object;
  #L14afe4.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14afea.  v1:= temp @kind object;
  #L14afec.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14aff2.  v1:= temp @kind object;
  #L14aff4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14affa.  throw v0;
  #L14affc.  call `appendStringType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b002.  v0:= 32I;
  #L14b006.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b00c.  call temp:= `isGeneratedIdSequence`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @kind virtual;
  #L14b012.  v0:= temp;
  #L14b014.  if v0 == 0 then goto L14b114;
  #L14b018.  call temp:= `isSelfGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L14b01e.  v0:= temp;
  #L14b020.  if v0 != 0 then goto L14b114;
  #L14b024.  v0:= v8 @kind object;
  #L14b026.  v1:= v10 @kind object;
  #L14b028.  v2:= v11 @kind object;
  #L14b02a.  v3:= v13 @kind object;
  #L14b02c.  v4:= v12 @kind object;
  #L14b02e.  v5:= v15 @kind object;
  #L14b030.  call `configureGeneratedIdSequence`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedIdSequence:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L14b036.  call temp:= `isGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L14b03c.  v0:= temp;
  #L14b03e.  if v0 != 0 then goto L14b08c;
  #L14b042.  call temp:= `getDefaultValue`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L14b048.  v0:= temp @kind object;
  #L14b04a.  if v0 == 0 then goto L14b068;
  #L14b04e.  v1:= "DEFAULT " @kind object;
  #L14b052.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b058.  call `appendDefaultValue`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDefaultValue:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @kind direct;
  #L14b05e.  v0:= 32I;
  #L14b062.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b068.  call temp:= `isCanBeNull`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isCanBeNull:()Z` @kind virtual;
  #L14b06e.  v0:= temp;
  #L14b070.  if v0 == 0 then goto L14b168;
  #L14b074.  call `appendCanBeNull`(v8, v10, v11) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCanBeNull:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L14b07a.  call temp:= `isUnique`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isUnique:()Z` @kind virtual;
  #L14b080.  v0:= temp;
  #L14b082.  if v0 == 0 then goto L14b08c;
  #L14b086.  call `addSingleUnique`(v8, v10, v11, v12, v14) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addSingleUnique:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L14b08c.  return @kind void;
  #L14b08e.  call `appendLongStringType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b094.  goto L14b002;
  #L14b096.  call `appendBooleanType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBooleanType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b09c.  goto L14b002;
  #L14b09e.  call `appendDateType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDateType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0a4.  goto L14b002;
  #L14b0a6.  call `appendCharType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCharType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0ac.  goto L14b002;
  #L14b0ae.  call `appendByteType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0b4.  goto L14b002;
  #L14b0b6.  call `appendByteArrayType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteArrayType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0bc.  goto L14b002;
  #L14b0be.  call `appendShortType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendShortType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0c4.  goto L14b002;
  #L14b0c6.  call `appendIntegerType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendIntegerType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L14b0cc.  goto L14b002;
  #L14b0ce.  call `appendLongType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0d4.  goto L14b002;
  #L14b0d6.  call `appendFloatType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendFloatType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L14b0dc.  goto L14b002;
  #L14b0de.  call `appendDoubleType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDoubleType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L14b0e4.  goto L14b002;
  #L14b0e6.  call `appendSerializableType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSerializableType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0ec.  goto L14b002;
  #L14b0ee.  call `appendBigDecimalNumericType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBigDecimalNumericType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0f4.  goto L14b002;
  #L14b0f6.  call `appendUuidNativeType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendUuidNativeType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L14b0fc.  goto L14b002;
  #L14b0fe.  call temp:= `getSqlOtherType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlOtherType:()Ljava/lang/String;` @kind interface;
  #L14b104.  v0:= temp @kind object;
  #L14b106.  if v0 == 0 then goto L14b002;
  #L14b10a.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b110.  goto L14b002;
  #L14b114.  call temp:= `isGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L14b11a.  v0:= temp;
  #L14b11c.  if v0 == 0 then goto L14b146;
  #L14b120.  call temp:= `isSelfGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L14b126.  v0:= temp;
  #L14b128.  if v0 != 0 then goto L14b146;
  #L14b12c.  v0:= v8 @kind object;
  #L14b12e.  v1:= v9 @kind object;
  #L14b130.  v2:= v10 @kind object;
  #L14b132.  v3:= v11 @kind object;
  #L14b134.  v4:= v13 @kind object;
  #L14b136.  v5:= v14 @kind object;
  #L14b138.  v6:= v12 @kind object;
  #L14b13a.  v7:= v15 @kind object;
  #L14b13c.  call `configureGeneratedId`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L14b142.  goto L14b036;
  #L14b146.  call temp:= `isId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L14b14c.  v0:= temp;
  #L14b14e.  if v0 == 0 then goto L14b036;
  #L14b152.  v0:= v8 @kind object;
  #L14b154.  v1:= v10 @kind object;
  #L14b156.  v2:= v11 @kind object;
  #L14b158.  v3:= v13 @kind object;
  #L14b15a.  v4:= v12 @kind object;
  #L14b15c.  v5:= v15 @kind object;
  #L14b15e.  call `configureId`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureId:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L14b164.  goto L14b036;
  #L14b168.  v0:= "NOT NULL " @kind object;
  #L14b16c.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b172.  goto L14b07a;
  #L14b174.  switch v2
                  | 1 => goto L14affc
                  | 2 => goto L14b08e
                  | 3 => goto L14b096
                  | 4 => goto L14b09e
                  | 5 => goto L14b0a6
                  | 6 => goto L14b0ae
                  | 7 => goto L14b0b6
                  | 8 => goto L14b0be
                  | 9 => goto L14b0c6
                  | 10 => goto L14b0ce
                  | 11 => goto L14b0d6
                  | 12 => goto L14b0de
                  | 13 => goto L14b0e6
                  | 14 => goto L14b0ee
                  | 15 => goto L14b0f6
                  | 16 => goto L14b0fe
                  | else => goto L14afc2;
}
procedure `void` `appendCreateTableSuffix`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCreateTableSuffix:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;

  #L14b1cc.  return @kind void;
}
procedure `void` `appendDateType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDateType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14b1e0.  v0:= "TIMESTAMP" @kind object;
  #L14b1e4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b1ea.  return @kind void;
}
procedure `void` `appendEscapedEntityName`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14b1fc.  v2:= 96I;
  #L14b200.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b206.  v0:= 46I;
  #L14b20a.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L14b210.  v0:= temp;
  #L14b212.  if v0 <= 0 then goto L14b24a;
  #L14b216.  v1:= 0I;
  #L14b218.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L14b21e.  v1:= temp @kind object;
  #L14b220.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b226.  v1:= "`.`" @kind object;
  #L14b22a.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b230.  v0:= v0 + 1;
  #L14b234.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L14b23a.  v0:= temp @kind object;
  #L14b23c.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b242.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b248.  return @kind void;
  #L14b24a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b250.  goto L14b242;
}
procedure `void` `appendEscapedWord`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14b264.  v1:= 39I;
  #L14b268.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b26e.  v0:= temp @kind object;
  #L14b270.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b276.  v0:= temp @kind object;
  #L14b278.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b27e.  return @kind void;
}
procedure `void` `appendInsertNoColumns`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b290.  v0:= "() VALUES ()" @kind object;
  #L14b294.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b29a.  return @kind void;
}
procedure `void` `appendLimitValue`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `long` v4 , `java.lang.Long` v6 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLimitValue:(Ljava/lang/StringBuilder;JLjava/lang/Long;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14b2ac.  v0:= "LIMIT " @kind object;
  #L14b2b0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b2b6.  v0:= temp @kind object;
  #L14b2b8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b2be.  v0:= temp @kind object;
  #L14b2c0.  v1:= 32I;
  #L14b2c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b2ca.  return @kind void;
}
procedure `void` `appendLongStringType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14b2dc.  v0:= "TEXT" @kind object;
  #L14b2e0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b2e6.  return @kind void;
}
procedure `void` `appendLongType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14b2f8.  v0:= "BIGINT" @kind object;
  #L14b2fc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b302.  return @kind void;
}
procedure `void` `appendOffsetValue`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `long` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendOffsetValue:(Ljava/lang/StringBuilder;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14b314.  v0:= "OFFSET " @kind object;
  #L14b318.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b31e.  v0:= temp @kind object;
  #L14b320.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b326.  v0:= temp @kind object;
  #L14b328.  v1:= 32I;
  #L14b32c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b332.  return @kind void;
}
procedure `void` `appendSelectNextValFromSequence`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSelectNextValFromSequence:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L14b344.  return @kind void;
}
procedure `void` `appendSerializableType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSerializableType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14b358.  v0:= "BLOB" @kind object;
  #L14b35c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b362.  return @kind void;
}
procedure `void` `appendShortType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendShortType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14b374.  v0:= "SMALLINT" @kind object;
  #L14b378.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b37e.  return @kind void;
}
procedure `void` `appendStringType`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L14b390.  call temp:= `isVarcharFieldWidthSupported`(v2) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isVarcharFieldWidthSupported:()Z` @kind virtual;
  #L14b396.  v0:= temp;
  #L14b398.  if v0 == 0 then goto L14b3bc;
  #L14b39c.  v0:= "VARCHAR(" @kind object;
  #L14b3a0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b3a6.  v0:= temp @kind object;
  #L14b3a8.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b3ae.  v0:= temp @kind object;
  #L14b3b0.  v1:= 41I;
  #L14b3b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b3ba.  return @kind void;
  #L14b3bc.  v0:= "VARCHAR" @kind object;
  #L14b3c0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b3c6.  goto L14b3ba;
}
procedure `void` `appendUuidNativeType`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendUuidNativeType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L14b3d8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14b3dc.  v1:= "UUID is not supported by this database type" @kind object;
  #L14b3e0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14b3e6.  throw v0;
}
procedure `void` `configureGeneratedId`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.StringBuilder` v5 @kind object, `com.j256.ormlite.field.FieldType` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L14b3f8.  v0:= new `java.lang.IllegalStateException`;
  #L14b3fc.  v1:= new `java.lang.StringBuilder`;
  #L14b400.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14b406.  v2:= "GeneratedId is not supported by database " @kind object;
  #L14b40a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b410.  v1:= temp @kind object;
  #L14b412.  call temp:= `getDatabaseName`(v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L14b418.  v2:= temp @kind object;
  #L14b41a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b420.  v1:= temp @kind object;
  #L14b422.  v2:= " for field " @kind object;
  #L14b426.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b42c.  v1:= temp @kind object;
  #L14b42e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b434.  v1:= temp @kind object;
  #L14b436.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14b43c.  v1:= temp @kind object;
  #L14b43e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14b444.  throw v0;
}
procedure `void` `configureGeneratedIdSequence`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedIdSequence:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L14b458.  v0:= new `java.sql.SQLException`;
  #L14b45c.  v1:= new `java.lang.StringBuilder`;
  #L14b460.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14b466.  v2:= "GeneratedIdSequence is not supported by database " @kind object;
  #L14b46a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b470.  v1:= temp @kind object;
  #L14b472.  call temp:= `getDatabaseName`(v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L14b478.  v2:= temp @kind object;
  #L14b47a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b480.  v1:= temp @kind object;
  #L14b482.  v2:= " for field " @kind object;
  #L14b486.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b48c.  v1:= temp @kind object;
  #L14b48e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b494.  v1:= temp @kind object;
  #L14b496.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14b49c.  v1:= temp @kind object;
  #L14b49e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14b4a4.  throw v0;
}
procedure `void` `configureId`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureId:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;

  #L14b4b8.  return @kind void;
}
procedure `void` `dropColumnArg`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.util.List` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.dropColumnArg:(Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L14b4cc.  return @kind void;
}
procedure `com.j256.ormlite.table.DatabaseTableConfig` `extractDatabaseTableConfig`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `com.j256.ormlite.support.ConnectionSource` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.extractDatabaseTableConfig:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b4e0.  v0:= 0I;
  #L14b4e2.  return v0 @kind object;
}
procedure `java.lang.String` `generateIdSequenceName`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14b4f4.  v0:= new `java.lang.StringBuilder`;
  #L14b4f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14b4fe.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b504.  v0:= temp @kind object;
  #L14b506.  v1:= `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @type ^`java.lang.String` @kind object;
  #L14b50a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b510.  v0:= temp @kind object;
  #L14b512.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14b518.  v0:= temp @kind object;
  #L14b51a.  call temp:= `isEntityNamesMustBeUpCase`(v2) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind virtual;
  #L14b520.  v1:= temp;
  #L14b522.  if v1 == 0 then goto L14b52e;
  #L14b526.  call temp:= `upCaseEntityName`(v2, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L14b52c.  v0:= temp @kind object;
  #L14b52e.  return v0 @kind object;
}
procedure `boolean` `generatedIdSqlAtEnd`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generatedIdSqlAtEnd:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14b540.  v0:= 1I;
  #L14b542.  return v0;
}
procedure `java.lang.String` `getCommentLinePrefix`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getCommentLinePrefix:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b554.  v0:= "-- " @kind object;
  #L14b558.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.DataPersister` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC {
    temp;

  #L14b56c.  return v1 @kind object;
}
procedure `java.lang.String` `getDriverClassName`() @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDriverClassName:()Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `com.j256.ormlite.field.FieldConverter` `getFieldConverter`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.DataPersister` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @AccessFlag PUBLIC {
    temp;

  #L14b580.  return v1 @kind object;
}
procedure `java.lang.String` `getPingStatement`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getPingStatement:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b594.  v0:= "SELECT 1" @kind object;
  #L14b598.  return v0 @kind object;
}
procedure `boolean` `isAllowGeneratedIdInsertSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isAllowGeneratedIdInsertSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b5ac.  v0:= 1I;
  #L14b5ae.  return v0;
}
procedure `boolean` `isBatchUseTransaction`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isBatchUseTransaction:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b5c0.  v0:= 0I;
  #L14b5c2.  return v0;
}
procedure `boolean` `isCreateIfNotExistsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b5d4.  v0:= 0I;
  #L14b5d6.  return v0;
}
procedure `boolean` `isCreateIndexIfNotExistsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIndexIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b5e8.  call temp:= `isCreateIfNotExistsSupported`(v1) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIfNotExistsSupported:()Z` @kind virtual;
  #L14b5ee.  v0:= temp;
  #L14b5f0.  return v0;
}
procedure `boolean` `isCreateTableReturnsNegative`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateTableReturnsNegative:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b604.  v0:= 0I;
  #L14b606.  return v0;
}
procedure `boolean` `isCreateTableReturnsZero`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateTableReturnsZero:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b618.  v0:= 1I;
  #L14b61a.  return v0;
}
procedure `boolean` `isEntityNamesMustBeUpCase`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isEntityNamesMustBeUpCase:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b62c.  v0:= 0I;
  #L14b62e.  return v0;
}
procedure `boolean` `isIdSequenceNeeded`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isIdSequenceNeeded:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b640.  v0:= 0I;
  #L14b642.  return v0;
}
procedure `boolean` `isLimitAfterSelect`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isLimitAfterSelect:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b654.  v0:= 0I;
  #L14b656.  return v0;
}
procedure `boolean` `isLimitSqlSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isLimitSqlSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b668.  v0:= 1I;
  #L14b66a.  return v0;
}
procedure `boolean` `isNestedSavePointsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isNestedSavePointsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b67c.  v0:= 1I;
  #L14b67e.  return v0;
}
procedure `boolean` `isOffsetLimitArgument`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isOffsetLimitArgument:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b690.  v0:= 0I;
  #L14b692.  return v0;
}
procedure `boolean` `isOffsetSqlSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isOffsetSqlSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b6a4.  v0:= 1I;
  #L14b6a6.  return v0;
}
procedure `boolean` `isSelectSequenceBeforeInsert`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isSelectSequenceBeforeInsert:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b6b8.  v0:= 0I;
  #L14b6ba.  return v0;
}
procedure `boolean` `isTruncateSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isTruncateSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b6cc.  v0:= 0I;
  #L14b6ce.  return v0;
}
procedure `boolean` `isVarcharFieldWidthSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isVarcharFieldWidthSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b6e0.  v0:= 1I;
  #L14b6e2.  return v0;
}
procedure `void` `loadDriver`(`com.j256.ormlite.db.BaseDatabaseType` v4 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.loadDriver:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14b6f4.  call temp:= `getDriverClassName`(v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDriverClassName:()Ljava/lang/String;` @kind virtual;
  #L14b6fa.  v0:= temp @kind object;
  #L14b6fc.  if v0 == 0 then goto L14b706;
  #Try_start0.  
  #L14b700.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #Try_end0.  
  #L14b706.  return @kind void;
  #L14b708.  v1:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L14b70a.  v2:= new `java.lang.StringBuilder`;
  #L14b70e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14b714.  v3:= "Driver class was not found for " @kind object;
  #L14b718.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b71e.  v2:= temp @kind object;
  #L14b720.  call temp:= `getDatabaseName`(v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L14b726.  v3:= temp @kind object;
  #L14b728.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b72e.  v2:= temp @kind object;
  #L14b730.  v3:= " database.  Missing jar with class " @kind object;
  #L14b734.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b73a.  v2:= temp @kind object;
  #L14b73c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b742.  v0:= temp @kind object;
  #L14b744.  v2:= "." @kind object;
  #L14b748.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b74e.  v0:= temp @kind object;
  #L14b750.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14b756.  v0:= temp @kind object;
  #L14b758.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L14b75e.  v0:= temp @kind object;
  #L14b760.  throw v0;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L14b708;
}
procedure `void` `setDriver`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.sql.Driver` v1 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.setDriver:(Ljava/sql/Driver;)V` @AccessFlag PUBLIC {
    temp;

  #L14b784.  v0.`com.j256.ormlite.db.BaseDatabaseType.driver` @type ^`java.sql.Driver` := v1 @kind object;
  #L14b788.  return @kind void;
}
procedure `java.lang.String` `upCaseEntityName`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b79c.  v0:= `@@java.util.Locale.ENGLISH` @type ^`java.util.Locale` @kind object;
  #L14b7a0.  call temp:= `toUpperCase`(v2, v0) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L14b7a6.  v0:= temp @kind object;
  #L14b7a8.  return v0 @kind object;
}
