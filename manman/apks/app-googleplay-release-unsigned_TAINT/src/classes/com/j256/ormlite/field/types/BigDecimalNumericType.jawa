record `com.j256.ormlite.field.types.BigDecimalNumericType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.BigDecimalNumericType` `@@com.j256.ormlite.field.types.BigDecimalNumericType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1512f0.  v0:= new `com.j256.ormlite.field.types.BigDecimalNumericType`;
  #L1512f4.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.<init>:()V` @kind direct;
  #L1512fa.  `@@com.j256.ormlite.field.types.BigDecimalNumericType.singleTon` @type ^`com.j256.ormlite.field.types.BigDecimalNumericType` := v0 @kind object;
  #L1512fe.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L151310.  v0:= `@@com.j256.ormlite.field.SqlType.BIG_DECIMAL` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L151314.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15131a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigDecimalNumericType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15132c.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L151332.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BigDecimalNumericType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.getSingleton:()Lcom/j256/ormlite/field/types/BigDecimalNumericType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L151344.  v0:= `@@com.j256.ormlite.field.types.BigDecimalNumericType.singleTon` @type ^`com.j256.ormlite.field.types.BigDecimalNumericType` @kind object;
  #L151348.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15135c.  v0:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L151360.  return v0 @kind object;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151374.  v0:= 0I;
  #L151376.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151388.  v0:= 0I;
  #L15138a.  return v0;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BigDecimalNumericType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L15139c.  v0:= new `java.math.BigDecimal`;
  #L1513a0.  call `<init>`(v0, v5) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L1513a6.  return v0 @kind object;
  #L1513a8.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1513aa.  v1:= new `java.lang.StringBuilder`;
  #L1513ae.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1513b4.  v2:= "Problems with field " @kind object;
  #L1513b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1513be.  v1:= temp @kind object;
  #L1513c0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1513c6.  v1:= temp @kind object;
  #L1513c8.  v2:= " parsing default BigDecimal string '" @kind object;
  #L1513cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1513d2.  v1:= temp @kind object;
  #L1513d4.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1513da.  v1:= temp @kind object;
  #L1513dc.  v2:= "'" @kind object;
  #L1513e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1513e6.  v1:= temp @kind object;
  #L1513e8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1513ee.  v1:= temp @kind object;
  #L1513f0.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1513f6.  v0:= temp @kind object;
  #L1513f8.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L1513a8;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15141c.  call temp:= `getBigDecimal`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getBigDecimal:(I)Ljava/math/BigDecimal;` @kind interface;
  #L151422.  v0:= temp @kind object;
  #L151424.  return v0 @kind object;
}
