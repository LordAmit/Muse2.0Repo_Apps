record `com.j256.ormlite.db.DatabaseType` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `void` `addPrimaryKeySql`(`com.j256.ormlite.field.FieldType`[] v0 @kind object, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.addPrimaryKeySql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `addUniqueComboSql`(`com.j256.ormlite.field.FieldType`[] v0 @kind object, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.addUniqueComboSql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendColumnArg`(`java.lang.String` v0 @kind object, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendColumnArg:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendCreateTableSuffix`(`java.lang.StringBuilder` v0 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendCreateTableSuffix:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendEscapedEntityName`(`java.lang.StringBuilder` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendEscapedWord`(`java.lang.StringBuilder` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendInsertNoColumns`(`java.lang.StringBuilder` v0 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendLimitValue`(`java.lang.StringBuilder` v0 @kind object, `long` v1 , `java.lang.Long` v3 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendLimitValue:(Ljava/lang/StringBuilder;JLjava/lang/Long;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendOffsetValue`(`java.lang.StringBuilder` v0 @kind object, `long` v1 ) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendOffsetValue:(Ljava/lang/StringBuilder;J)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendSelectNextValFromSequence`(`java.lang.StringBuilder` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendSelectNextValFromSequence:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `dropColumnArg`(`com.j256.ormlite.field.FieldType` v0 @kind object, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.dropColumnArg:(Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.j256.ormlite.table.DatabaseTableConfig` `extractDatabaseTableConfig`(`com.j256.ormlite.support.ConnectionSource` v0 @kind object, `java.lang.Class` v1 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.extractDatabaseTableConfig:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `generateIdSequenceName`(`java.lang.String` v0 @kind object, `com.j256.ormlite.field.FieldType` v1 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getCommentLinePrefix`() @signature `Lcom/j256/ormlite/db/DatabaseType;.getCommentLinePrefix:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.field.DataPersister` v0 @kind object, `com.j256.ormlite.field.FieldType` v1 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getDatabaseName`() @signature `Lcom/j256/ormlite/db/DatabaseType;.getDatabaseName:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.j256.ormlite.field.FieldConverter` `getFieldConverter`(`com.j256.ormlite.field.DataPersister` v0 @kind object, `com.j256.ormlite.field.FieldType` v1 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getPingStatement`() @signature `Lcom/j256/ormlite/db/DatabaseType;.getPingStatement:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isAllowGeneratedIdInsertSupported`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isAllowGeneratedIdInsertSupported:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isBatchUseTransaction`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isBatchUseTransaction:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCreateIfNotExistsSupported`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isCreateIfNotExistsSupported:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCreateIndexIfNotExistsSupported`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isCreateIndexIfNotExistsSupported:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCreateTableReturnsNegative`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isCreateTableReturnsNegative:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCreateTableReturnsZero`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isCreateTableReturnsZero:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isDatabaseUrlThisType`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.isDatabaseUrlThisType:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEntityNamesMustBeUpCase`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isEntityNamesMustBeUpCase:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isIdSequenceNeeded`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isIdSequenceNeeded:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isLimitAfterSelect`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isLimitAfterSelect:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isLimitSqlSupported`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isLimitSqlSupported:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isNestedSavePointsSupported`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isNestedSavePointsSupported:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isOffsetLimitArgument`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isOffsetLimitArgument:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isOffsetSqlSupported`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isOffsetSqlSupported:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isSelectSequenceBeforeInsert`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isSelectSequenceBeforeInsert:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isTruncateSupported`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isTruncateSupported:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isVarcharFieldWidthSupported`() @signature `Lcom/j256/ormlite/db/DatabaseType;.isVarcharFieldWidthSupported:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `loadDriver`() @signature `Lcom/j256/ormlite/db/DatabaseType;.loadDriver:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setDriver`(`java.sql.Driver` v0 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.setDriver:(Ljava/sql/Driver;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `upCaseEntityName`(`java.lang.String` v0 @kind object) @signature `Lcom/j256/ormlite/db/DatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
