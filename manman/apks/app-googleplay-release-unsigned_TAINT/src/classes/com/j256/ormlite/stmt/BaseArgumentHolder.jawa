record `com.j256.ormlite.stmt.BaseArgumentHolder` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.stmt.ArgumentHolder` @kind interface {
  `java.lang.String` `com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.SqlType` `com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L157028.  v0:= 0I;
  #L15702a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L157030.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L157034.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L157038.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L15703c.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this, `com.j256.ormlite.field.SqlType` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L157050.  v0:= 0I;
  #L157052.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L157058.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L15705c.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L157060.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L157064.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v2 @kind object;
  #L157068.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15707c.  v0:= 0I;
  #L15707e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L157084.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L157088.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L15708c.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L157090.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v2 @kind object;
  #L157094.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1570a8.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L1570ac.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getFieldType`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getFieldType:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1570c0.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1570c4.  return v0 @kind object;
}
procedure `java.lang.Object` `getSqlArgValue`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1570d8.  call temp:= `isValueSet`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @kind virtual;
  #L1570de.  v0:= temp;
  #L1570e0.  if v0 != 0 then goto L15711a;
  #L1570e4.  v0:= new `java.sql.SQLException`;
  #L1570e8.  v1:= new `java.lang.StringBuilder`;
  #L1570ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1570f2.  v2:= "Column value has not been set for " @kind object;
  #L1570f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1570fc.  v1:= temp @kind object;
  #L1570fe.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L157102.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157108.  v1:= temp @kind object;
  #L15710a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L157110.  v1:= temp @kind object;
  #L157112.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157118.  throw v0;
  #L15711a.  call temp:= `getValue`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L157120.  v0:= temp @kind object;
  #L157122.  if v0 != 0 then goto L15712a;
  #L157126.  v0:= 0I;
  #L157128.  return v0 @kind object;
  #L15712a.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15712e.  if v1 == 0 then goto L157128;
  #L157132.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L157136.  call temp:= `isForeign`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L15713c.  v1:= temp;
  #L15713e.  if v1 == 0 then goto L157170;
  #L157142.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L157146.  call temp:= `getType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15714c.  v1:= temp @kind object;
  #L15714e.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L157154.  v2:= temp @kind object;
  #L157156.  if v1 != v2 then goto L157170;
  #L15715a.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15715e.  call temp:= `getForeignRefField`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignRefField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L157164.  v1:= temp @kind object;
  #L157166.  call temp:= `extractJavaFieldValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15716c.  v0:= temp @kind object;
  #L15716e.  goto L157128;
  #L157170.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L157174.  call temp:= `convertJavaFieldToSqlArgValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15717a.  v0:= temp @kind object;
  #L15717c.  goto L157128;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157190.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L157194.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`() @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getValue:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isValueSet`() @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1571a8.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1571ac.  if v0 != 0 then goto L1571b6;
  #L1571b0.  v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v4 @kind object;
  #L1571b4.  return @kind void;
  #L1571b6.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1571ba.  if v0 == v4 then goto L1571b0;
  #L1571be.  v0:= new `java.lang.IllegalArgumentException`;
  #L1571c2.  v1:= new `java.lang.StringBuilder`;
  #L1571c6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1571cc.  v2:= "FieldType name cannot be set twice from " @kind object;
  #L1571d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1571d6.  v1:= temp @kind object;
  #L1571d8.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1571dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1571e2.  v1:= temp @kind object;
  #L1571e4.  v2:= " to " @kind object;
  #L1571e8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1571ee.  v1:= temp @kind object;
  #L1571f0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1571f6.  v1:= temp @kind object;
  #L1571f8.  v2:= ".  Using a SelectArg twice in query with different columns?" @kind object;
  #L1571fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157202.  v1:= temp @kind object;
  #L157204.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15720a.  v1:= temp @kind object;
  #L15720c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157212.  throw v0;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L157224.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L157228.  if v0 != 0 then goto L157232;
  #L15722c.  v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v4 @kind object;
  #L157230.  return @kind void;
  #L157232.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L157236.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15723c.  v0:= temp;
  #L15723e.  if v0 != 0 then goto L15722c;
  #L157242.  v0:= new `java.lang.IllegalArgumentException`;
  #L157246.  v1:= new `java.lang.StringBuilder`;
  #L15724a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L157250.  v2:= "Column name cannot be set twice from " @kind object;
  #L157254.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15725a.  v1:= temp @kind object;
  #L15725c.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L157260.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157266.  v1:= temp @kind object;
  #L157268.  v2:= " to " @kind object;
  #L15726c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157272.  v1:= temp @kind object;
  #L157274.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15727a.  v1:= temp @kind object;
  #L15727c.  v2:= ".  Using a SelectArg twice in query with different columns?" @kind object;
  #L157280.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157286.  v1:= temp @kind object;
  #L157288.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15728e.  v1:= temp @kind object;
  #L157290.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157296.  throw v0;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v0 @kind this, `java.lang.String` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PUBLIC {
    temp;

  #L1572a8.  call `setMetaInfo`(v0, v1) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;)V` @kind virtual;
  #L1572ae.  call `setMetaInfo`(v0, v2) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Lcom/j256/ormlite/field/FieldType;)V` @kind virtual;
  #L1572b4.  return @kind void;
}
procedure `void` `setValue`(`java.lang.Object` v0 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setValue:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1572c8.  call temp:= `isValueSet`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @kind virtual;
  #L1572ce.  v0:= temp;
  #L1572d0.  if v0 != 0 then goto L1572da;
  #L1572d4.  v0:= "[unset]" @kind object;
  #L1572d8.  return v0 @kind object;
  #Try_start0.  
  #L1572da.  call temp:= `getSqlArgValue`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @kind virtual;
  #L1572e0.  v0:= temp @kind object;
  #L1572e2.  if v0 != 0 then goto L1572ec;
  #L1572e6.  v0:= "[null]" @kind object;
  #L1572ea.  goto L1572d8;
  #L1572ec.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L1572f2.  v0:= temp @kind object;
  #L1572f4.  goto L1572d8;
  #L1572f6.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L1572f8.  v1:= new `java.lang.StringBuilder`;
  #L1572fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L157302.  v2:= "[could not get value: " @kind object;
  #L157306.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15730c.  v1:= temp @kind object;
  #L15730e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157314.  v0:= temp @kind object;
  #L157316.  v1:= "]" @kind object;
  #L15731a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157320.  v0:= temp @kind object;
  #L157322.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L157328.  v0:= temp @kind object;
  #L15732a.  goto L1572d8;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L1572f6;
}
