record `com.j256.ormlite.stmt.query.Not` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.Clause` @kind interface, `com.j256.ormlite.stmt.query.NeedsFutureClause` @kind interface {
  `com.j256.ormlite.stmt.query.Comparison` `com.j256.ormlite.stmt.query.Not.comparison` @AccessFlag PRIVATE;
  `com.j256.ormlite.stmt.query.Exists` `com.j256.ormlite.stmt.query.Not.exists` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Not` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Not;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15e8a4.  v0:= 0I;
  #L15e8a6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15e8ac.  v1.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v0 @kind object;
  #L15e8b0.  v1.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v0 @kind object;
  #L15e8b4.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Not` v1 @kind this, `com.j256.ormlite.stmt.query.Clause` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.<init>:(Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15e8c8.  v0:= 0I;
  #L15e8ca.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15e8d0.  v1.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v0 @kind object;
  #L15e8d4.  v1.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v0 @kind object;
  #L15e8d8.  call `setMissingClause`(v1, v2) @signature `Lcom/j256/ormlite/stmt/query/Not;.setMissingClause:(Lcom/j256/ormlite/stmt/query/Clause;)V` @kind virtual;
  #L15e8de.  return @kind void;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.Not` v2 @kind this, `com.j256.ormlite.db.DatabaseType` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.StringBuilder` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e8f0.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L15e8f4.  if v0 != 0 then goto L15e910;
  #L15e8f8.  v0:= v2.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` @kind object;
  #L15e8fc.  if v0 != 0 then goto L15e910;
  #L15e900.  v0:= new `java.lang.IllegalStateException`;
  #L15e904.  v1:= "Clause has not been set in NOT operation" @kind object;
  #L15e908.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e90e.  throw v0;
  #L15e910.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L15e914.  if v0 != 0 then goto L15e938;
  #L15e918.  v0:= "(NOT " @kind object;
  #L15e91c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e922.  v0:= v2.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` @kind object;
  #L15e926.  call `appendSql`(v0, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/stmt/query/Exists;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L15e92c.  v0:= ") " @kind object;
  #L15e930.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e936.  return @kind void;
  #L15e938.  v0:= "(NOT " @kind object;
  #L15e93c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e942.  if v4 == 0 then goto L15e956;
  #L15e946.  call `appendEscapedEntityName`(v3, v5, v4) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15e94c.  v0:= 46I;
  #L15e950.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e956.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L15e95a.  call temp:= `getColumnName`(v0) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.getColumnName:()Ljava/lang/String;` @kind interface;
  #L15e960.  v0:= temp @kind object;
  #L15e962.  call `appendEscapedEntityName`(v3, v5, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15e968.  v0:= 32I;
  #L15e96c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e972.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L15e976.  call `appendOperation`(v0, v5) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind interface;
  #L15e97c.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L15e980.  call `appendValue`(v0, v3, v5, v6) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind interface;
  #L15e986.  goto L15e92c;
}
procedure `void` `setMissingClause`(`com.j256.ormlite.stmt.query.Not` v3 @kind this, `com.j256.ormlite.stmt.query.Clause` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.setMissingClause:(Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15e998.  v0:= v3.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L15e99c.  if v0 == 0 then goto L15e9b0;
  #L15e9a0.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e9a4.  v1:= "NOT operation already has a comparison set" @kind object;
  #L15e9a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e9ae.  throw v0;
  #L15e9b0.  v0:= instanceof @variable v4 @type ^`com.j256.ormlite.stmt.query.Comparison` @kind boolean;
  #L15e9b4.  if v0 == 0 then goto L15e9c2;
  #L15e9b8.  v4:= (`com.j256.ormlite.stmt.query.Comparison`) v4 @kind object;
  #L15e9bc.  v3.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v4 @kind object;
  #L15e9c0.  return @kind void;
  #L15e9c2.  v0:= instanceof @variable v4 @type ^`com.j256.ormlite.stmt.query.Exists` @kind boolean;
  #L15e9c6.  if v0 == 0 then goto L15e9d4;
  #L15e9ca.  v4:= (`com.j256.ormlite.stmt.query.Exists`) v4 @kind object;
  #L15e9ce.  v3.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v4 @kind object;
  #L15e9d2.  goto L15e9c0;
  #L15e9d4.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e9d8.  v1:= new `java.lang.StringBuilder`;
  #L15e9dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e9e2.  v2:= "NOT operation can only work with comparison SQL clauses, not " @kind object;
  #L15e9e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e9ec.  v1:= temp @kind object;
  #L15e9ee.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e9f4.  v1:= temp @kind object;
  #L15e9f6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e9fc.  v1:= temp @kind object;
  #L15e9fe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ea04.  throw v0;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.Not` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Not;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15ea18.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L15ea1c.  if v0 != 0 then goto L15ea26;
  #L15ea20.  v0:= "NOT without comparison" @kind object;
  #L15ea24.  return v0 @kind object;
  #L15ea26.  v0:= new `java.lang.StringBuilder`;
  #L15ea2a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15ea30.  v1:= "NOT comparison " @kind object;
  #L15ea34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ea3a.  v0:= temp @kind object;
  #L15ea3c.  v1:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L15ea40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ea46.  v0:= temp @kind object;
  #L15ea48.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ea4e.  v0:= temp @kind object;
  #L15ea50.  goto L15ea24;
}
