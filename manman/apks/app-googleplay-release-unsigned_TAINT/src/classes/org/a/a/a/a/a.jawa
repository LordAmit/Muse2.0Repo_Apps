record `org.a.a.a.a.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.io.InputStream` @kind class {
  `long` `org.a.a.a.a.a.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.a.a.a.a.a` v2 @kind this) @signature `Lorg/a/a/a/a/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L162d28.  call `<init>`(v2) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L162d2e.  v0:= 0L;
  #L162d32.  v2.`org.a.a.a.a.a.a` @type ^`long` := v0 @kind wide;
  #L162d36.  return @kind void;
}
procedure `void` `a`(`org.a.a.a.a.a` v2 @kind this, `int` v3 ) @signature `Lorg/a/a/a/a/a;.a:(I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L162d48.  v0:= (`long`) v3 @kind i2l;
  #L162d4a.  call `a`(v2, v0) @signature `Lorg/a/a/a/a/a;.a:(J)V` @kind virtual;
  #L162d50.  return @kind void;
}
procedure `void` `a`(`org.a.a.a.a.a` v3 @kind this, `long` v4 ) @signature `Lorg/a/a/a/a/a;.a:(J)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L162d64.  v0:= -1L;
  #L162d68.  v0:= lcmp(v4, v0);
  #L162d6c.  if v0 == 0 then goto L162d7a;
  #L162d70.  v0:= v3.`org.a.a.a.a.a.a` @type ^`long` @kind wide;
  #L162d74.  v0:= v0 + v4 @kind long;
  #L162d76.  v3.`org.a.a.a.a.a.a` @type ^`long` := v0 @kind wide;
  #L162d7a.  return @kind void;
}
