record `a.j` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a.b.d` `a.j.a` @AccessFlag FINAL;
  `boolean` `a.j.b` @AccessFlag ;
  `int` `a.j.e` @AccessFlag PRIVATE_FINAL;
  `long` `a.j.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `a.j.g` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.j.h` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.j.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@a.j.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L08638c.  v8:= 1I;
  #L08638e.  v2:= 0I;
  #L086390.  v0:= constclass @type ^`a.j` @kind object;
  #L086394.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L08639a.  v0:= temp;
  #L08639c.  if v0 != 0 then goto L0863da;
  #L0863a0.  v0:= v8;
  #L0863a2.  `@@a.j.c` @type ^`boolean` := v0 @kind boolean;
  #L0863a6.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L0863aa.  v3:= 2147483647I;
  #L0863b0.  v4:= 60L;
  #L0863b4.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L0863b8.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L0863bc.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L0863c2.  v0:= "OkHttp ConnectionPool" @kind object;
  #L0863c6.  call temp:= `a`(v0, v8) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L0863cc.  v8:= temp @kind object;
  #L0863ce.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L0863d4.  `@@a.j.d` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L0863d8.  return @kind void;
  #L0863da.  v0:= v2;
  #L0863dc.  goto L0863a2;
}
procedure `void` `<init>`(`a.j` v4 @kind this) @signature `La/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0863f0.  v0:= 5I;
  #L0863f2.  v2:= 5L;
  #L0863f6.  v1:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L0863fa.  call `<init>`(v4, v0, v2, v1) @signature `La/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L086400.  return @kind void;
}
procedure `void` `<init>`(`a.j` v4 @kind this, `int` v5 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `La/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L086414.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08641a.  v0:= new `a.j$1`;
  #L08641e.  call `<init>`(v0, v4) @signature `La/j$1;.<init>:(La/j;)V` @kind direct;
  #L086424.  v4.`a.j.g` @type ^`java.lang.Runnable` := v0 @kind object;
  #L086428.  v0:= new `java.util.ArrayDeque`;
  #L08642c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L086432.  v4.`a.j.h` @type ^`java.util.Deque` := v0 @kind object;
  #L086436.  v0:= new `a.a.b.d`;
  #L08643a.  call `<init>`(v0) @signature `La/a/b/d;.<init>:()V` @kind direct;
  #L086440.  v4.`a.j.a` @type ^`a.a.b.d` := v0 @kind object;
  #L086444.  v4.`a.j.e` @type ^`int` := v5;
  #L086448.  call temp:= `toNanos`(v8, v6) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L08644e.  v0:= temp @kind wide;
  #L086450.  v4.`a.j.f` @type ^`long` := v0 @kind wide;
  #L086454.  v0:= 0L;
  #L086458.  v0:= lcmp(v6, v0);
  #L08645c.  if v0 > 0 then goto L086492;
  #L086460.  v0:= new `java.lang.IllegalArgumentException`;
  #L086464.  v1:= new `java.lang.StringBuilder`;
  #L086468.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08646e.  v2:= "keepAliveDuration <= 0: " @kind object;
  #L086472.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086478.  v1:= temp @kind object;
  #L08647a.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L086480.  v1:= temp @kind object;
  #L086482.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L086488.  v1:= temp @kind object;
  #L08648a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086490.  throw v0;
  #L086492.  return @kind void;
}
procedure `int` `a`(`a.j` v6 @kind this, `a.a.b.c` v7 @kind object, `long` v8 ) @signature `La/j;.a:(La/a/b/c;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0864a4.  v2:= 0I;
  #L0864a6.  v3:= v7.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L0864aa.  v1:= v2;
  #L0864ac.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0864b2.  v0:= temp;
  #L0864b4.  if v1 >= v0 then goto L08655e;
  #L0864b8.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L0864be.  v0:= temp @kind object;
  #L0864c0.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L0864c4.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L0864ca.  v4:= temp @kind object;
  #L0864cc.  if v4 == 0 then goto L0864d8;
  #L0864d0.  v0:= v1 + 1;
  #L0864d4.  v1:= v0;
  #L0864d6.  goto L0864ac;
  #L0864d8.  v0:= (`a.a.b.g$a`) v0 @kind object;
  #L0864dc.  v4:= new `java.lang.StringBuilder`;
  #L0864e0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0864e6.  v5:= "A connection to " @kind object;
  #L0864ea.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0864f0.  v4:= temp @kind object;
  #L0864f2.  call temp:= `a`(v7) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L0864f8.  v5:= temp @kind object;
  #L0864fa.  call temp:= `a`(v5) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L086500.  v5:= temp @kind object;
  #L086502.  call temp:= `a`(v5) @signature `La/a;.a:()La/r;` @kind virtual;
  #L086508.  v5:= temp @kind object;
  #L08650a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086510.  v4:= temp @kind object;
  #L086512.  v5:= " was leaked. Did you forget to close a response body?" @kind object;
  #L086516.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08651c.  v4:= temp @kind object;
  #L08651e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L086524.  v4:= temp @kind object;
  #L086526.  call temp:= `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @kind static;
  #L08652c.  v5:= temp @kind object;
  #L08652e.  v0:= v0.`a.a.b.g$a.a` @type ^`java.lang.Object` @kind object;
  #L086532.  call `a`(v5, v4, v0) @signature `La/a/g/e;.a:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L086538.  call temp:= `remove`(v3, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L08653e.  v0:= 1I;
  #L086540.  v7.`a.a.b.c.a` @type ^`boolean` := v0 @kind boolean;
  #L086544.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L08654a.  v0:= temp;
  #L08654c.  if v0 == 0 then goto L0864ac;
  #L086550.  v0:= v6.`a.j.f` @type ^`long` @kind wide;
  #L086554.  v0:= v8 - v0 @kind long;
  #L086558.  v7.`a.a.b.c.e` @type ^`long` := v0 @kind wide;
  #L08655c.  return v2;
  #L08655e.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L086564.  v2:= temp;
  #L086566.  goto L08655c;
}
procedure `long` `a`(`a.j` v13 @kind this, `long` v14 ) @signature `La/j;.a:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L086578.  v0:= 0I;
  #L08657a.  v1:= 0I;
  #L08657c.  v4:= -9223372036854775808L;
  #L086580.  @monitorenter v13
  #Try_start0.  
  #L086582.  v2:= v13.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086586.  call temp:= `iterator`(v2) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08658c.  v8:= temp @kind object;
  #L08658e.  v2:= v0;
  #L086590.  v7:= v0;
  #L086592.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L086598.  v0:= temp;
  #L08659a.  if v0 == 0 then goto L0865e0;
  #L08659e.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0865a4.  v0:= temp @kind object;
  #L0865a6.  v0:= (`a.a.b.c`) v0 @kind object;
  #L0865aa.  call temp:= `a`(v13, v0, v14) @signature `La/j;.a:(La/a/b/c;J)I` @kind direct;
  #L0865b0.  v3:= temp;
  #L0865b2.  if v3 <= 0 then goto L0865be;
  #L0865b6.  v0:= v7 + 1;
  #L0865ba.  v7:= v0;
  #L0865bc.  goto L086592;
  #L0865be.  v6:= v2 + 1;
  #L0865c2.  v2:= v0.`a.a.b.c.e` @type ^`long` @kind wide;
  #L0865c6.  v2:= v14 - v2 @kind long;
  #L0865ca.  v9:= lcmp(v2, v4);
  #L0865ce.  if v9 <= 0 then goto L086642;
  #L0865d2.  v10:= v2 @kind wide;
  #L0865d4.  v2:= v0 @kind object;
  #L0865d6.  v0:= v10 @kind wide;
  #L0865d8.  v4:= v0 @kind wide;
  #L0865da.  v1:= v2 @kind object;
  #L0865dc.  v2:= v6;
  #L0865de.  goto L086592;
  #L0865e0.  v8:= v13.`a.j.f` @type ^`long` @kind wide;
  #L0865e4.  v0:= lcmp(v4, v8);
  #L0865e8.  if v0 >= 0 then goto L0865f4;
  #L0865ec.  v0:= v13.`a.j.e` @type ^`int`;
  #L0865f0.  if v2 <= v0 then goto L086614;
  #L0865f4.  v0:= v13.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L0865f8.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L0865fe.  @monitorexit v13
  #Try_end0.  
  #L086600.  call temp:= `b`(v1) @signature `La/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L086606.  v0:= temp @kind object;
  #L086608.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L08660e.  v0:= 0L;
  #L086612.  return v0 @kind wide;
  #L086614.  if v2 <= 0 then goto L086628;
  #Try_start1.  
  #L086618.  v0:= v13.`a.j.f` @type ^`long` @kind wide;
  #L08661c.  v0:= v0 - v4 @kind long;
  #L08661e.  @monitorexit v13
  #L086620.  goto L086612;
  #L086622.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086624.  @monitorexit v13
  #Try_end1.  
  #L086626.  throw v0;
  #L086628.  if v7 <= 0 then goto L086634;
  #Try_start2.  
  #L08662c.  v0:= v13.`a.j.f` @type ^`long` @kind wide;
  #L086630.  @monitorexit v13
  #L086632.  goto L086612;
  #L086634.  v0:= 0I;
  #L086636.  v13.`a.j.b` @type ^`boolean` := v0 @kind boolean;
  #L08663a.  v0:= -1L;
  #L08663e.  @monitorexit v13
  #Try_end2.  
  #L086640.  goto L086612;
  #L086642.  v2:= v1 @kind object;
  #L086644.  v0:= v4 @kind wide;
  #L086646.  goto L0865d8;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L086622;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L086622;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L086622;
}
procedure `a.a.b.c` `a`(`a.j` v3 @kind this, `a.a` v4 @kind object, `a.a.b.g` v5 @kind object) @signature `La/j;.a:(La/a;La/a/b/g;)La/a/b/c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L086674.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L086678.  if v0 != 0 then goto L086694;
  #L08667c.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L086682.  v0:= temp;
  #L086684.  if v0 != 0 then goto L086694;
  #L086688.  v0:= new `java.lang.AssertionError`;
  #L08668c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L086692.  throw v0;
  #L086694.  v0:= v3.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086698.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08669e.  v1:= temp @kind object;
  #L0866a0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0866a6.  v0:= temp;
  #L0866a8.  if v0 == 0 then goto L0866cc;
  #L0866ac.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0866b2.  v0:= temp @kind object;
  #L0866b4.  v0:= (`a.a.b.c`) v0 @kind object;
  #L0866b8.  call temp:= `a`(v0, v4) @signature `La/a/b/c;.a:(La/a;)Z` @kind virtual;
  #L0866be.  v2:= temp;
  #L0866c0.  if v2 == 0 then goto L0866a0;
  #L0866c4.  call `a`(v5, v0) @signature `La/a/b/g;.a:(La/a/b/c;)V` @kind virtual;
  #L0866ca.  return v0 @kind object;
  #L0866cc.  v0:= 0I;
  #L0866ce.  goto L0866ca;
}
procedure `void` `a`(`a.j` v2 @kind this, `a.a.b.c` v3 @kind object) @signature `La/j;.a:(La/a/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L0866e0.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L0866e4.  if v0 != 0 then goto L086700;
  #L0866e8.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0866ee.  v0:= temp;
  #L0866f0.  if v0 != 0 then goto L086700;
  #L0866f4.  v0:= new `java.lang.AssertionError`;
  #L0866f8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0866fe.  throw v0;
  #L086700.  v0:= v2.`a.j.b` @type ^`boolean` @kind boolean;
  #L086704.  if v0 != 0 then goto L08671c;
  #L086708.  v0:= 1I;
  #L08670a.  v2.`a.j.b` @type ^`boolean` := v0 @kind boolean;
  #L08670e.  v0:= `@@a.j.d` @type ^`java.util.concurrent.Executor` @kind object;
  #L086712.  v1:= v2.`a.j.g` @type ^`java.lang.Runnable` @kind object;
  #L086716.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L08671c.  v0:= v2.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086720.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L086726.  return @kind void;
}
procedure `java.net.Socket` `b`(`a.j` v3 @kind this, `a.a` v4 @kind object, `a.a.b.g` v5 @kind object) @signature `La/j;.b:(La/a;La/a/b/g;)Ljava/net/Socket;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L086738.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L08673c.  if v0 != 0 then goto L086758;
  #L086740.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L086746.  v0:= temp;
  #L086748.  if v0 != 0 then goto L086758;
  #L08674c.  v0:= new `java.lang.AssertionError`;
  #L086750.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L086756.  throw v0;
  #L086758.  v0:= v3.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L08675c.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L086762.  v1:= temp @kind object;
  #L086764.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L08676a.  v0:= temp;
  #L08676c.  if v0 == 0 then goto L0867aa;
  #L086770.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L086776.  v0:= temp @kind object;
  #L086778.  v0:= (`a.a.b.c`) v0 @kind object;
  #L08677c.  call temp:= `a`(v0, v4) @signature `La/a/b/c;.a:(La/a;)Z` @kind virtual;
  #L086782.  v2:= temp;
  #L086784.  if v2 == 0 then goto L086764;
  #L086788.  call temp:= `d`(v0) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L08678e.  v2:= temp;
  #L086790.  if v2 == 0 then goto L086764;
  #L086794.  call temp:= `b`(v5) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L08679a.  v2:= temp @kind object;
  #L08679c.  if v0 == v2 then goto L086764;
  #L0867a0.  call temp:= `b`(v5, v0) @signature `La/a/b/g;.b:(La/a/b/c;)Ljava/net/Socket;` @kind virtual;
  #L0867a6.  v0:= temp @kind object;
  #L0867a8.  return v0 @kind object;
  #L0867aa.  v0:= 0I;
  #L0867ac.  goto L0867a8;
}
procedure `boolean` `b`(`a.j` v1 @kind this, `a.a.b.c` v2 @kind object) @signature `La/j;.b:(La/a/b/c;)Z` @AccessFlag  {
    temp;
    v0;

  #L0867c0.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L0867c4.  if v0 != 0 then goto L0867e0;
  #L0867c8.  call temp:= `holdsLock`(v1) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0867ce.  v0:= temp;
  #L0867d0.  if v0 != 0 then goto L0867e0;
  #L0867d4.  v0:= new `java.lang.AssertionError`;
  #L0867d8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0867de.  throw v0;
  #L0867e0.  v0:= v2.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L0867e4.  if v0 != 0 then goto L0867f0;
  #L0867e8.  v0:= v1.`a.j.e` @type ^`int`;
  #L0867ec.  if v0 != 0 then goto L0867fe;
  #L0867f0.  v0:= v1.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L0867f4.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L0867fa.  v0:= 1I;
  #L0867fc.  return v0;
  #L0867fe.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L086804.  v0:= 0I;
  #L086806.  goto L0867fc;
}
