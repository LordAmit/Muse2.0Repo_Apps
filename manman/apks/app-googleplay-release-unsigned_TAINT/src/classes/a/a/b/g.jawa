record `a.a.b.g` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a` `a.a.b.g.a` @AccessFlag PUBLIC_FINAL;
  `a.ab` `a.a.b.g.c` @AccessFlag PRIVATE;
  `a.j` `a.a.b.g.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `a.a.b.g.e` @AccessFlag PRIVATE_FINAL;
  `a.a.b.f` `a.a.b.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.b.g.g` @AccessFlag PRIVATE;
  `a.a.b.c` `a.a.b.g.h` @AccessFlag PRIVATE;
  `boolean` `a.a.b.g.i` @AccessFlag PRIVATE;
  `boolean` `a.a.b.g.j` @AccessFlag PRIVATE;
  `a.a.c.c` `a.a.b.g.k` @AccessFlag PRIVATE;
}
global `boolean` `@@a.a.b.g.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L076b94.  v0:= constclass @type ^`a.a.b.g` @kind object;
  #L076b98.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L076b9e.  v0:= temp;
  #L076ba0.  if v0 != 0 then goto L076bac;
  #L076ba4.  v0:= 1I;
  #L076ba6.  `@@a.a.b.g.b` @type ^`boolean` := v0 @kind boolean;
  #L076baa.  return @kind void;
  #L076bac.  v0:= 0I;
  #L076bae.  goto L076ba6;
}
procedure `void` `<init>`(`a.a.b.g` v2 @kind this, `a.j` v3 @kind object, `a.a` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `La/a/b/g;.<init>:(La/j;La/a;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L076bc0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L076bc6.  v2.`a.a.b.g.d` @type ^`a.j` := v3 @kind object;
  #L076bca.  v2.`a.a.b.g.a` @type ^`a.a` := v4 @kind object;
  #L076bce.  v0:= new `a.a.b.f`;
  #L076bd2.  call temp:= `f`(v2) @signature `La/a/b/g;.f:()La/a/b/d;` @kind direct;
  #L076bd8.  v1:= temp @kind object;
  #L076bda.  call `<init>`(v0, v4, v1) @signature `La/a/b/f;.<init>:(La/a;La/a/b/d;)V` @kind direct;
  #L076be0.  v2.`a.a.b.g.f` @type ^`a.a.b.f` := v0 @kind object;
  #L076be4.  v2.`a.a.b.g.e` @type ^`java.lang.Object` := v5 @kind object;
  #L076be8.  return @kind void;
}
procedure `a.a.b.c` `a`(`a.a.b.g` v6 @kind this, `int` v7 , `int` v8 , `int` v9 , `boolean` v10 ) @signature `La/a/b/g;.a:(IIIZ)La/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L076bfc.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076c00.  @monitorenter v1
  #Try_start0.  
  #L076c02.  v0:= v6.`a.a.b.g.i` @type ^`boolean` @kind boolean;
  #L076c06.  if v0 == 0 then goto L076c20;
  #L076c0a.  v0:= new `java.lang.IllegalStateException`;
  #L076c0e.  v2:= "released" @kind object;
  #L076c12.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L076c18.  throw v0;
  #L076c1a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L076c1c.  @monitorexit v1
  #Try_end0.  
  #L076c1e.  throw v0;
  #Try_start1.  
  #L076c20.  v0:= v6.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L076c24.  if v0 == 0 then goto L076c38;
  #L076c28.  v0:= new `java.lang.IllegalStateException`;
  #L076c2c.  v2:= "codec != null" @kind object;
  #L076c30.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L076c36.  throw v0;
  #L076c38.  v0:= v6.`a.a.b.g.j` @type ^`boolean` @kind boolean;
  #L076c3c.  if v0 == 0 then goto L076c50;
  #L076c40.  v0:= new `java.io.IOException`;
  #L076c44.  v2:= "Canceled" @kind object;
  #L076c48.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L076c4e.  throw v0;
  #L076c50.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076c54.  if v0 == 0 then goto L076c64;
  #L076c58.  v2:= v0.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L076c5c.  if v2 != 0 then goto L076c64;
  #L076c60.  @monitorexit v1
  #L076c62.  return v0 @kind object;
  #L076c64.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L076c68.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076c6c.  v3:= v6.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L076c70.  call temp:= `a`(v0, v2, v3, v6) @signature `La/a/a;.a:(La/j;La/a;La/a/b/g;)La/a/b/c;` @kind virtual;
  #L076c76.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076c7a.  if v0 == 0 then goto L076c86;
  #L076c7e.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076c82.  @monitorexit v1
  #L076c84.  goto L076c62;
  #L076c86.  v0:= v6.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L076c8a.  @monitorexit v1
  #Try_end1.  
  #L076c8c.  if v0 != 0 then goto L076c9c;
  #L076c90.  v0:= v6.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L076c94.  call temp:= `b`(v0) @signature `La/a/b/f;.b:()La/ab;` @kind virtual;
  #L076c9a.  v0:= temp @kind object;
  #L076c9c.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076ca0.  @monitorenter v2
  #Try_start2.  
  #L076ca2.  v6.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L076ca6.  v1:= 0I;
  #L076ca8.  v6.`a.a.b.g.g` @type ^`int` := v1;
  #L076cac.  v1:= new `a.a.b.c`;
  #L076cb0.  v3:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076cb4.  call `<init>`(v1, v3, v0) @signature `La/a/b/c;.<init>:(La/j;La/ab;)V` @kind direct;
  #L076cba.  call `a`(v6, v1) @signature `La/a/b/g;.a:(La/a/b/c;)V` @kind virtual;
  #L076cc0.  v0:= v6.`a.a.b.g.j` @type ^`boolean` @kind boolean;
  #L076cc4.  if v0 == 0 then goto L076cde;
  #L076cc8.  v0:= new `java.io.IOException`;
  #L076ccc.  v1:= "Canceled" @kind object;
  #L076cd0.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L076cd6.  throw v0;
  #L076cd8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L076cda.  @monitorexit v2
  #Try_end2.  
  #L076cdc.  throw v0;
  #Try_start3.  
  #L076cde.  @monitorexit v2
  #Try_end3.  
  #L076ce0.  call `a`(v1, v7, v8, v9, v10) @signature `La/a/b/c;.a:(IIIZ)V` @kind virtual;
  #L076ce6.  call temp:= `f`(v6) @signature `La/a/b/g;.f:()La/a/b/d;` @kind direct;
  #L076cec.  v0:= temp @kind object;
  #L076cee.  call temp:= `a`(v1) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L076cf4.  v2:= temp @kind object;
  #L076cf6.  call `b`(v0, v2) @signature `La/a/b/d;.b:(La/ab;)V` @kind virtual;
  #L076cfc.  v0:= 0I;
  #L076cfe.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076d02.  @monitorenter v2
  #Try_start4.  
  #L076d04.  v3:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L076d08.  v4:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076d0c.  call `b`(v3, v4, v1) @signature `La/a/a;.b:(La/j;La/a/b/c;)V` @kind virtual;
  #L076d12.  call temp:= `d`(v1) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L076d18.  v3:= temp;
  #L076d1a.  if v3 == 0 then goto L076d4c;
  #L076d1e.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L076d22.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076d26.  v3:= v6.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L076d2a.  call temp:= `b`(v0, v1, v3, v6) @signature `La/a/a;.b:(La/j;La/a;La/a/b/g;)Ljava/net/Socket;` @kind virtual;
  #L076d30.  v0:= temp @kind object;
  #L076d32.  v1:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076d36.  v5:= v0 @kind object;
  #L076d38.  v0:= v1 @kind object;
  #L076d3a.  v1:= v5 @kind object;
  #L076d3c.  @monitorexit v2
  #Try_end4.  
  #L076d3e.  call `a`(v1) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L076d44.  goto L076c62;
  #L076d46.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start5.  
  #L076d48.  @monitorexit v2
  #Try_end5.  
  #L076d4a.  throw v0;
  #L076d4c.  v5:= v0 @kind object;
  #L076d4e.  v0:= v1 @kind object;
  #L076d50.  v1:= v5 @kind object;
  #L076d52.  goto L076d3c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L076c1a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L076c1a;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L076cd8;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L076cd8;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L076d46;
  catch `java.lang.Throwable` @[Try_start5..Try_end5] goto L076d46;
}
procedure `a.a.b.c` `a`(`a.a.b.g` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `boolean` v7 , `boolean` v8 ) @signature `La/a/b/g;.a:(IIIZZ)La/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L076d9c.  call temp:= `a`(v3, v4, v5, v6, v7) @signature `La/a/b/g;.a:(IIIZ)La/a/b/c;` @kind direct;
  #L076da2.  v0:= temp @kind object;
  #L076da4.  v1:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076da8.  @monitorenter v1
  #Try_start0.  
  #L076daa.  v2:= v0.`a.a.b.c.b` @type ^`int`;
  #L076dae.  if v2 != 0 then goto L076db6;
  #L076db2.  @monitorexit v1
  #L076db4.  return v0 @kind object;
  #L076db6.  @monitorexit v1
  #Try_end0.  
  #L076db8.  call temp:= `a`(v0, v8) @signature `La/a/b/c;.a:(Z)Z` @kind virtual;
  #L076dbe.  v1:= temp;
  #L076dc0.  if v1 != 0 then goto L076db4;
  #L076dc4.  call `d`(v3) @signature `La/a/b/g;.d:()V` @kind virtual;
  #L076dca.  goto L076d9c;
  #L076dcc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L076dce.  @monitorexit v1
  #Try_end1.  
  #L076dd0.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L076dcc;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L076dcc;
}
procedure `java.net.Socket` `a`(`a.a.b.g` v4 @kind this, `boolean` v5 , `boolean` v6 , `boolean` v7 ) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L076df8.  v2:= 1I;
  #L076dfa.  v1:= 0I;
  #L076dfc.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L076e00.  if v0 != 0 then goto L076e20;
  #L076e04.  v0:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076e08.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L076e0e.  v0:= temp;
  #L076e10.  if v0 != 0 then goto L076e20;
  #L076e14.  v0:= new `java.lang.AssertionError`;
  #L076e18.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L076e1e.  throw v0;
  #L076e20.  if v7 == 0 then goto L076e28;
  #L076e24.  v4.`a.a.b.g.k` @type ^`a.a.c.c` := v1 @kind object;
  #L076e28.  if v6 == 0 then goto L076e30;
  #L076e2c.  v4.`a.a.b.g.i` @type ^`boolean` := v2 @kind boolean;
  #L076e30.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076e34.  if v0 == 0 then goto L076eb8;
  #L076e38.  if v5 == 0 then goto L076e44;
  #L076e3c.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076e40.  v0.`a.a.b.c.a` @type ^`boolean` := v2 @kind boolean;
  #L076e44.  v0:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L076e48.  if v0 != 0 then goto L076eb8;
  #L076e4c.  v0:= v4.`a.a.b.g.i` @type ^`boolean` @kind boolean;
  #L076e50.  if v0 != 0 then goto L076e60;
  #L076e54.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076e58.  v0:= v0.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L076e5c.  if v0 == 0 then goto L076eb8;
  #L076e60.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076e64.  call `c`(v4, v0) @signature `La/a/b/g;.c:(La/a/b/c;)V` @kind direct;
  #L076e6a.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076e6e.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L076e72.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L076e78.  v0:= temp;
  #L076e7a.  if v0 == 0 then goto L076eba;
  #L076e7e.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076e82.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L076e88.  v2:= temp @kind wide;
  #L076e8a.  v0.`a.a.b.c.e` @type ^`long` := v2 @kind wide;
  #L076e8e.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L076e92.  v2:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076e96.  v3:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076e9a.  call temp:= `a`(v0, v2, v3) @signature `La/a/a;.a:(La/j;La/a/b/c;)Z` @kind virtual;
  #L076ea0.  v0:= temp;
  #L076ea2.  if v0 == 0 then goto L076eba;
  #L076ea6.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L076eaa.  call temp:= `b`(v0) @signature `La/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L076eb0.  v0:= temp @kind object;
  #L076eb2.  v4.`a.a.b.g.h` @type ^`a.a.b.c` := v1 @kind object;
  #L076eb6.  v1:= v0 @kind object;
  #L076eb8.  return v1 @kind object;
  #L076eba.  v0:= v1 @kind object;
  #L076ebc.  goto L076eb2;
}
procedure `void` `c`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.c:(La/a/b/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L076ed0.  v0:= 0I;
  #L076ed2.  v1:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L076ed6.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L076edc.  v2:= temp;
  #L076ede.  v1:= v0;
  #L076ee0.  if v1 >= v2 then goto L076f14;
  #L076ee4.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L076ee8.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L076eee.  v0:= temp @kind object;
  #L076ef0.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L076ef4.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L076efa.  v0:= temp @kind object;
  #L076efc.  if v0 != v3 then goto L076f0c;
  #L076f00.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L076f04.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L076f0a.  return @kind void;
  #L076f0c.  v0:= v1 + 1;
  #L076f10.  v1:= v0;
  #L076f12.  goto L076ee0;
  #L076f14.  v0:= new `java.lang.IllegalStateException`;
  #L076f18.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L076f1e.  throw v0;
}
procedure `a.a.b.d` `f`(`a.a.b.g` v2 @kind this) @signature `La/a/b/g;.f:()La/a/b/d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L076f30.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L076f34.  v1:= v2.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076f38.  call temp:= `a`(v0, v1) @signature `La/a/a;.a:(La/j;)La/a/b/d;` @kind virtual;
  #L076f3e.  v0:= temp @kind object;
  #L076f40.  return v0 @kind object;
}
procedure `a.a.c.c` `a`(`a.a.b.g` v2 @kind this) @signature `La/a/b/g;.a:()La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L076f54.  v1:= v2.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076f58.  @monitorenter v1
  #Try_start0.  
  #L076f5a.  v0:= v2.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L076f5e.  @monitorexit v1
  #L076f60.  return v0 @kind object;
  #L076f62.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L076f64.  @monitorexit v1
  #Try_end0.  
  #L076f66.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L076f62;
}
procedure `a.a.c.c` `a`(`a.a.b.g` v6 @kind this, `a.u` v7 @kind object, `boolean` v8 ) @signature `La/a/b/g;.a:(La/u;Z)La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L076f84.  call temp:= `a`(v7) @signature `La/u;.a:()I` @kind virtual;
  #L076f8a.  v1:= temp;
  #L076f8c.  call temp:= `b`(v7) @signature `La/u;.b:()I` @kind virtual;
  #L076f92.  v2:= temp;
  #L076f94.  call temp:= `c`(v7) @signature `La/u;.c:()I` @kind virtual;
  #L076f9a.  v3:= temp;
  #L076f9c.  call temp:= `r`(v7) @signature `La/u;.r:()Z` @kind virtual;
  #L076fa2.  v4:= temp;
  #L076fa4.  v0:= v6 @kind object;
  #L076fa6.  v5:= v8;
  #Try_start0.  
  #L076fa8.  call temp:= `a`(v0, v1, v2, v3, v4, v5) @signature `La/a/b/g;.a:(IIIZZ)La/a/b/c;` @kind direct;
  #L076fae.  v0:= temp @kind object;
  #L076fb0.  call temp:= `a`(v0, v7, v6) @signature `La/a/b/c;.a:(La/u;La/a/b/g;)La/a/c/c;` @kind virtual;
  #L076fb6.  v0:= temp @kind object;
  #L076fb8.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L076fbc.  @monitorenter v1
  #Try_end0.  
  #Try_start1.  
  #L076fbe.  v6.`a.a.b.g.k` @type ^`a.a.c.c` := v0 @kind object;
  #L076fc2.  @monitorexit v1
  #L076fc4.  return v0 @kind object;
  #L076fc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L076fc8.  @monitorexit v1
  #Try_end1.  
  #Try_start2.  
  #L076fca.  throw v0;
  #Try_end2.  
  #L076fcc.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L076fce.  v1:= new `a.a.b.e`;
  #L076fd2.  call `<init>`(v1, v0) @signature `La/a/b/e;.<init>:(Ljava/io/IOException;)V` @kind direct;
  #L076fd8.  throw v1;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L076fcc;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L076fc6;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L076fcc;
}
procedure `void` `a`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.a:(La/a/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07700c.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L077010.  if v0 != 0 then goto L077030;
  #L077014.  v0:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077018.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07701e.  v0:= temp;
  #L077020.  if v0 != 0 then goto L077030;
  #L077024.  v0:= new `java.lang.AssertionError`;
  #L077028.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07702e.  throw v0;
  #L077030.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L077034.  if v0 == 0 then goto L077044;
  #L077038.  v0:= new `java.lang.IllegalStateException`;
  #L07703c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L077042.  throw v0;
  #L077044.  v3.`a.a.b.g.h` @type ^`a.a.b.c` := v4 @kind object;
  #L077048.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07704c.  v1:= new `a.a.b.g$a`;
  #L077050.  v2:= v3.`a.a.b.g.e` @type ^`java.lang.Object` @kind object;
  #L077054.  call `<init>`(v1, v3, v2) @signature `La/a/b/g$a;.<init>:(La/a/b/g;Ljava/lang/Object;)V` @kind direct;
  #L07705a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L077060.  return @kind void;
}
procedure `void` `a`(`a.a.b.g` v5 @kind this, `java.io.IOException` v6 @kind object) @signature `La/a/b/g;.a:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L077074.  v0:= 0I;
  #L077076.  v1:= 1I;
  #L077078.  v2:= v5.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07707c.  @monitorenter v2
  #Try_start0.  
  #L07707e.  v3:= instanceof @variable v6 @type ^`a.a.e.o` @kind boolean;
  #L077082.  if v3 == 0 then goto L0770d4;
  #L077086.  v6:= (`a.a.e.o`) v6 @kind object;
  #L07708a.  v3:= v6.`a.a.e.o.a` @type ^`a.a.e.b` @kind object;
  #L07708e.  v4:= `@@a.a.e.b.e` @type ^`a.a.e.b` @kind object;
  #L077092.  if v3 != v4 then goto L0770a2;
  #L077096.  v3:= v5.`a.a.b.g.g` @type ^`int`;
  #L07709a.  v3:= v3 + 1;
  #L07709e.  v5.`a.a.b.g.g` @type ^`int` := v3;
  #L0770a2.  v3:= v6.`a.a.e.o.a` @type ^`a.a.e.b` @kind object;
  #L0770a6.  v4:= `@@a.a.e.b.e` @type ^`a.a.e.b` @kind object;
  #L0770aa.  if v3 != v4 then goto L0770b6;
  #L0770ae.  v3:= v5.`a.a.b.g.g` @type ^`int`;
  #L0770b2.  if v3 <= v1 then goto L0770be;
  #L0770b6.  v0:= 0I;
  #L0770b8.  v5.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L0770bc.  v0:= v1;
  #L0770be.  v1:= 0I;
  #L0770c0.  v3:= 1I;
  #L0770c2.  call temp:= `a`(v5, v0, v1, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L0770c8.  v0:= temp @kind object;
  #L0770ca.  @monitorexit v2
  #Try_end0.  
  #L0770cc.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L0770d2.  return @kind void;
  #Try_start1.  
  #L0770d4.  v3:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0770d8.  if v3 == 0 then goto L0770be;
  #L0770dc.  v3:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0770e0.  call temp:= `d`(v3) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L0770e6.  v3:= temp;
  #L0770e8.  if v3 == 0 then goto L0770f4;
  #L0770ec.  v3:= instanceof @variable v6 @type ^`a.a.e.a` @kind boolean;
  #L0770f0.  if v3 == 0 then goto L0770be;
  #L0770f4.  v0:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0770f8.  v0:= v0.`a.a.b.c.b` @type ^`int`;
  #L0770fc.  if v0 != 0 then goto L0770bc;
  #L077100.  v0:= v5.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L077104.  if v0 == 0 then goto L07711a;
  #L077108.  if v6 == 0 then goto L07711a;
  #L07710c.  v0:= v5.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L077110.  v3:= v5.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L077114.  call `a`(v0, v3, v6) @signature `La/a/b/f;.a:(La/ab;Ljava/io/IOException;)V` @kind virtual;
  #L07711a.  v0:= 0I;
  #L07711c.  v5.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L077120.  goto L0770bc;
  #L077122.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L077124.  @monitorexit v2
  #Try_end1.  
  #L077126.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L077122;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L077122;
}
procedure `void` `a`(`a.a.b.g` v4 @kind this, `boolean` v5 , `a.a.c.c` v6 @kind object) @signature `La/a/b/g;.a:(ZLa/a/c/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07714c.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077150.  @monitorenter v1
  #L077152.  if v6 == 0 then goto L07715e;
  #Try_start0.  
  #L077156.  v0:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L07715a.  if v6 == v0 then goto L0771ae;
  #L07715e.  v0:= new `java.lang.IllegalStateException`;
  #L077162.  v2:= new `java.lang.StringBuilder`;
  #L077166.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07716c.  v3:= "expected " @kind object;
  #L077170.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L077176.  v2:= temp @kind object;
  #L077178.  v3:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L07717c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L077182.  v2:= temp @kind object;
  #L077184.  v3:= " but was " @kind object;
  #L077188.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07718e.  v2:= temp @kind object;
  #L077190.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L077196.  v2:= temp @kind object;
  #L077198.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07719e.  v2:= temp @kind object;
  #L0771a0.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0771a6.  throw v0;
  #L0771a8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0771aa.  @monitorexit v1
  #Try_end0.  
  #L0771ac.  throw v0;
  #L0771ae.  if v5 != 0 then goto L0771c2;
  #Try_start1.  
  #L0771b2.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0771b6.  v2:= v0.`a.a.b.c.b` @type ^`int`;
  #L0771ba.  v2:= v2 + 1;
  #L0771be.  v0.`a.a.b.c.b` @type ^`int` := v2;
  #L0771c2.  v0:= 0I;
  #L0771c4.  v2:= 1I;
  #L0771c6.  call temp:= `a`(v4, v5, v0, v2) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L0771cc.  v0:= temp @kind object;
  #L0771ce.  @monitorexit v1
  #Try_end1.  
  #L0771d0.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L0771d6.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0771a8;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0771a8;
}
procedure `a.a.b.c` `b`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.b:()La/a/b/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0771fc.  @monitorenter v1
  #Try_start0.  
  #L0771fe.  v0:= v1.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #Try_end0.  
  #L077202.  @monitorexit v1
  #L077204.  return v0 @kind object;
  #L077206.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L077208.  @monitorexit v1
  #L07720a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L077206;
}
procedure `java.net.Socket` `b`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.b:(La/a/b/c;)Ljava/net/Socket;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L077228.  v2:= 1I;
  #L07722a.  v1:= 0I;
  #L07722c.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L077230.  if v0 != 0 then goto L077250;
  #L077234.  v0:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077238.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07723e.  v0:= temp;
  #L077240.  if v0 != 0 then goto L077250;
  #L077244.  v0:= new `java.lang.AssertionError`;
  #L077248.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07724e.  throw v0;
  #L077250.  v0:= v3.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L077254.  if v0 != 0 then goto L07726c;
  #L077258.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07725c.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L077260.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L077266.  v0:= temp;
  #L077268.  if v0 == v2 then goto L077278;
  #L07726c.  v0:= new `java.lang.IllegalStateException`;
  #L077270.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L077276.  throw v0;
  #L077278.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07727c.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L077280.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L077286.  v0:= temp @kind object;
  #L077288.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L07728c.  call temp:= `a`(v3, v2, v1, v1) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L077292.  v1:= temp @kind object;
  #L077294.  v3.`a.a.b.g.h` @type ^`a.a.b.c` := v4 @kind object;
  #L077298.  v2:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07729c.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0772a2.  return v1 @kind object;
}
procedure `void` `c`(`a.a.b.g` v4 @kind this) @signature `La/a/b/g;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0772b4.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0772b8.  @monitorenter v1
  #L0772ba.  v0:= 0I;
  #L0772bc.  v2:= 1I;
  #L0772be.  v3:= 0I;
  #Try_start0.  
  #L0772c0.  call temp:= `a`(v4, v0, v2, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L0772c6.  v0:= temp @kind object;
  #L0772c8.  @monitorexit v1
  #Try_end0.  
  #L0772ca.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L0772d0.  return @kind void;
  #L0772d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L0772d4.  @monitorexit v1
  #Try_end1.  
  #L0772d6.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0772d2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0772d2;
}
procedure `void` `d`(`a.a.b.g` v4 @kind this) @signature `La/a/b/g;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0772fc.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077300.  @monitorenter v1
  #L077302.  v0:= 1I;
  #L077304.  v2:= 0I;
  #L077306.  v3:= 0I;
  #Try_start0.  
  #L077308.  call temp:= `a`(v4, v0, v2, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07730e.  v0:= temp @kind object;
  #L077310.  @monitorexit v1
  #Try_end0.  
  #L077312.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L077318.  return @kind void;
  #L07731a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07731c.  @monitorexit v1
  #Try_end1.  
  #L07731e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07731a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07731a;
}
procedure `boolean` `e`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L077344.  v0:= v1.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L077348.  if v0 != 0 then goto L07735c;
  #L07734c.  v0:= v1.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L077350.  call temp:= `a`(v0) @signature `La/a/b/f;.a:()Z` @kind virtual;
  #L077356.  v0:= temp;
  #L077358.  if v0 == 0 then goto L077360;
  #L07735c.  v0:= 1I;
  #L07735e.  return v0;
  #L077360.  v0:= 0I;
  #L077362.  goto L07735e;
}
procedure `java.lang.String` `toString`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L077374.  call temp:= `b`(v1) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L07737a.  v0:= temp @kind object;
  #L07737c.  if v0 == 0 then goto L07738a;
  #L077380.  call temp:= `toString`(v0) @signature `La/a/b/c;.toString:()Ljava/lang/String;` @kind virtual;
  #L077386.  v0:= temp @kind object;
  #L077388.  return v0 @kind object;
  #L07738a.  v0:= v1.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L07738e.  call temp:= `toString`(v0) @signature `La/a;.toString:()Ljava/lang/String;` @kind virtual;
  #L077394.  v0:= temp @kind object;
  #L077396.  goto L077388;
}
