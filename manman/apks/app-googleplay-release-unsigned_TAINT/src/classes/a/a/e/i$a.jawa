record `a.a.e.i$a` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `boolean` `a.a.e.i$a.a` @AccessFlag ;
  `boolean` `a.a.e.i$a.b` @AccessFlag ;
  `a.a.e.i` `a.a.e.i$a.d` @AccessFlag FINAL_SYNTHETIC;
  `b.c` `a.a.e.i$a.e` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i$a.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L07ed50.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L07ed54.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07ed5a.  v0:= temp;
  #L07ed5c.  if v0 != 0 then goto L07ed68;
  #L07ed60.  v0:= 1I;
  #L07ed62.  `@@a.a.e.i$a.c` @type ^`boolean` := v0 @kind boolean;
  #L07ed66.  return @kind void;
  #L07ed68.  v0:= 0I;
  #L07ed6a.  goto L07ed62;
}
procedure `void` `<init>`(`a.a.e.i$a` v1 @kind this, `a.a.e.i` v2 @kind object) @signature `La/a/e/i$a;.<init>:(La/a/e/i;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L07ed7c.  v1.`a.a.e.i$a.d` @type ^`a.a.e.i` := v2 @kind object;
  #L07ed80.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07ed86.  v0:= new `b.c`;
  #L07ed8a.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07ed90.  v1.`a.a.e.i$a.e` @type ^`b.c` := v0 @kind object;
  #L07ed94.  return @kind void;
}
procedure `void` `a`(`a.a.e.i$a` v6 @kind this, `boolean` v7 ) @signature `La/a/e/i$a;.a:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07eda8.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07edac.  @monitorenter v1
  #Try_start0.  
  #L07edae.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07edb2.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07edb6.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_end0.  
  #Try_start1.  
  #L07edbc.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07edc0.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L07edc4.  v4:= 0L;
  #L07edc8.  v0:= lcmp(v2, v4);
  #L07edcc.  if v0 > 0 then goto L07ee10;
  #L07edd0.  v0:= v6.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L07edd4.  if v0 != 0 then goto L07ee10;
  #L07edd8.  v0:= v6.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L07eddc.  if v0 != 0 then goto L07ee10;
  #L07ede0.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ede4.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07ede8.  if v0 != 0 then goto L07ee10;
  #L07edec.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07edf0.  call `l`(v0) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end1.  
  #L07edf6.  goto L07edbc;
  #L07edf8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L07edfa.  v2:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07edfe.  v2:= v2.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07ee02.  call `b`(v2) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07ee08.  throw v0;
  #L07ee0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07ee0c.  @monitorexit v1
  #Try_end2.  
  #L07ee0e.  throw v0;
  #Try_start3.  
  #L07ee10.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ee14.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07ee18.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07ee1e.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ee22.  call `k`(v0) @signature `La/a/e/i;.k:()V` @kind virtual;
  #L07ee28.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ee2c.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L07ee30.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07ee34.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07ee3a.  v4:= temp @kind wide;
  #L07ee3c.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07ee42.  v4:= temp @kind wide;
  #L07ee44.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ee48.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L07ee4c.  v2:= v2 - v4 @kind long;
  #L07ee4e.  v0.`a.a.e.i.b` @type ^`long` := v2 @kind wide;
  #L07ee52.  @monitorexit v1
  #Try_end3.  
  #L07ee54.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ee58.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07ee5c.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_start4.  
  #L07ee62.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ee66.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07ee6a.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ee6e.  v1:= v1.`a.a.e.i.c` @type ^`int`;
  #L07ee72.  if v7 == 0 then goto L07eea6;
  #L07ee76.  v2:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07ee7a.  call temp:= `b`(v2) @signature `Lb/c;.b:()J` @kind virtual;
  #L07ee80.  v2:= temp @kind wide;
  #L07ee82.  v2:= lcmp(v4, v2);
  #L07ee86.  if v2 != 0 then goto L07eea6;
  #L07ee8a.  v2:= 1I;
  #L07ee8c.  v3:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07ee90.  call `a`(v0, v1, v2, v3, v4) @signature `La/a/e/g;.a:(IZLb/c;J)V` @kind virtual;
  #Try_end4.  
  #L07ee96.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ee9a.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07ee9e.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07eea4.  return @kind void;
  #L07eea6.  v2:= 0I;
  #L07eea8.  goto L07ee8c;
  #L07eeaa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07eeac.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07eeb0.  v1:= v1.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07eeb4.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07eeba.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07ee0a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07edf8;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07ee0a;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L07ee0a;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L07eeaa;
}
procedure `b.s` `a`(`a.a.e.i$a` v1 @kind this) @signature `La/a/e/i$a;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07eefc.  v0:= v1.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ef00.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07ef04.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.e.i$a` v4 @kind this, `b.c` v5 @kind object, `long` v6 ) @signature `La/a/e/i$a;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07ef18.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L07ef1c.  if v0 != 0 then goto L07ef3c;
  #L07ef20.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ef24.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07ef2a.  v0:= temp;
  #L07ef2c.  if v0 == 0 then goto L07ef3c;
  #L07ef30.  v0:= new `java.lang.AssertionError`;
  #L07ef34.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07ef3a.  throw v0;
  #L07ef3c.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07ef40.  call `a_`(v0, v5, v6) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L07ef46.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07ef4a.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07ef50.  v0:= temp @kind wide;
  #L07ef52.  v2:= 16384L;
  #L07ef56.  v0:= lcmp(v0, v2);
  #L07ef5a.  if v0 < 0 then goto L07ef68;
  #L07ef5e.  v0:= 0I;
  #L07ef60.  call `a`(v4, v0) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L07ef66.  goto L07ef46;
  #L07ef68.  return @kind void;
}
procedure `void` `close`(`a.a.e.i$a` v6 @kind this) @signature `La/a/e/i$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07ef7c.  v4:= 0L;
  #L07ef80.  v2:= 1I;
  #L07ef82.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L07ef86.  if v0 != 0 then goto L07efa6;
  #L07ef8a.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07ef8e.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07ef94.  v0:= temp;
  #L07ef96.  if v0 == 0 then goto L07efa6;
  #L07ef9a.  v0:= new `java.lang.AssertionError`;
  #L07ef9e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07efa4.  throw v0;
  #L07efa6.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07efaa.  @monitorenter v1
  #Try_start0.  
  #L07efac.  v0:= v6.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L07efb0.  if v0 == 0 then goto L07efb8;
  #L07efb4.  @monitorexit v1
  #L07efb6.  return @kind void;
  #L07efb8.  @monitorexit v1
  #Try_end0.  
  #L07efba.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07efbe.  v0:= v0.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L07efc2.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L07efc6.  if v0 != 0 then goto L07f018;
  #L07efca.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07efce.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07efd4.  v0:= temp @kind wide;
  #L07efd6.  v0:= lcmp(v0, v4);
  #L07efda.  if v0 <= 0 then goto L07f000;
  #L07efde.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07efe2.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07efe8.  v0:= temp @kind wide;
  #L07efea.  v0:= lcmp(v0, v4);
  #L07efee.  if v0 <= 0 then goto L07f018;
  #L07eff2.  call `a`(v6, v2) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L07eff8.  goto L07efde;
  #L07effa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07effc.  @monitorexit v1
  #Try_end1.  
  #L07effe.  throw v0;
  #L07f000.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f004.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f008.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f00c.  v1:= v1.`a.a.e.i.c` @type ^`int`;
  #L07f010.  v3:= 0I;
  #L07f012.  call `a`(v0, v1, v2, v3, v4) @signature `La/a/e/g;.a:(IZLb/c;J)V` @kind virtual;
  #L07f018.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f01c.  @monitorenter v1
  #L07f01e.  v0:= 1I;
  #Try_start2.  
  #L07f020.  v6.`a.a.e.i$a.a` @type ^`boolean` := v0 @kind boolean;
  #L07f024.  @monitorexit v1
  #Try_end2.  
  #L07f026.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f02a.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f02e.  call `b`(v0) @signature `La/a/e/g;.b:()V` @kind virtual;
  #L07f034.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f038.  call `j`(v0) @signature `La/a/e/i;.j:()V` @kind virtual;
  #L07f03e.  goto L07efb6;
  #L07f040.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L07f042.  @monitorexit v1
  #Try_end3.  
  #L07f044.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07effa;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07effa;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07f040;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L07f040;
}
procedure `void` `flush`(`a.a.e.i$a` v4 @kind this) @signature `La/a/e/i$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f080.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L07f084.  if v0 != 0 then goto L07f0a4;
  #L07f088.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f08c.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07f092.  v0:= temp;
  #L07f094.  if v0 == 0 then goto L07f0a4;
  #L07f098.  v0:= new `java.lang.AssertionError`;
  #L07f09c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07f0a2.  throw v0;
  #L07f0a4.  v1:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f0a8.  @monitorenter v1
  #Try_start0.  
  #L07f0aa.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f0ae.  call `k`(v0) @signature `La/a/e/i;.k:()V` @kind virtual;
  #L07f0b4.  @monitorexit v1
  #Try_end0.  
  #L07f0b6.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f0ba.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f0c0.  v0:= temp @kind wide;
  #L07f0c2.  v2:= 0L;
  #L07f0c6.  v0:= lcmp(v0, v2);
  #L07f0ca.  if v0 <= 0 then goto L07f0ec;
  #L07f0ce.  v0:= 0I;
  #L07f0d0.  call `a`(v4, v0) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L07f0d6.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f0da.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f0de.  call `b`(v0) @signature `La/a/e/g;.b:()V` @kind virtual;
  #L07f0e4.  goto L07f0b6;
  #L07f0e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07f0e8.  @monitorexit v1
  #Try_end1.  
  #L07f0ea.  throw v0;
  #L07f0ec.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f0e6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f0e6;
}
