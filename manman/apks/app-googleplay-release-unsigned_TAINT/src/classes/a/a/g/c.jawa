record `a.a.g.c` @kind class @AccessFlag  extends `a.a.g.e` @kind class {
  `java.lang.reflect.Method` `a.a.g.c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.c.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `a.a.g.c.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `a.a.g.c.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.c` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `La/a/g/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L082674.  call `<init>`(v0) @signature `La/a/g/e;.<init>:()V` @kind direct;
  #L08267a.  v0.`a.a.g.c.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L08267e.  v0.`a.a.g.c.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L082682.  v0.`a.a.g.c.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L082686.  v0.`a.a.g.c.d` @type ^`java.lang.Class` := v4 @kind object;
  #L08268a.  v0.`a.a.g.c.e` @type ^`java.lang.Class` := v5 @kind object;
  #L08268e.  return @kind void;
}
procedure `a.a.g.e` `a`() @signature `La/a/g/c;.a:()La/a/g/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #Try_start0.  
  #L0826a0.  v0:= "org.eclipse.jetty.alpn.ALPN" @kind object;
  #L0826a4.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L0826aa.  v3:= temp @kind object;
  #L0826ac.  v1:= new `java.lang.StringBuilder`;
  #L0826b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0826b6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0826bc.  v1:= temp @kind object;
  #L0826be.  v2:= "$Provider" @kind object;
  #L0826c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0826c8.  v1:= temp @kind object;
  #L0826ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0826d0.  v1:= temp @kind object;
  #L0826d2.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L0826d8.  v1:= temp @kind object;
  #L0826da.  v2:= new `java.lang.StringBuilder`;
  #L0826de.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0826e4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0826ea.  v2:= temp @kind object;
  #L0826ec.  v4:= "$ClientProvider" @kind object;
  #L0826f0.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0826f6.  v2:= temp @kind object;
  #L0826f8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0826fe.  v2:= temp @kind object;
  #L082700.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L082706.  v4:= temp @kind object;
  #L082708.  v2:= new `java.lang.StringBuilder`;
  #L08270c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L082712.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082718.  v0:= temp @kind object;
  #L08271a.  v2:= "$ServerProvider" @kind object;
  #L08271e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082724.  v0:= temp @kind object;
  #L082726.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08272c.  v0:= temp @kind object;
  #L08272e.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L082734.  v5:= temp @kind object;
  #L082736.  v0:= "put" @kind object;
  #L08273a.  v2:= 2I;
  #L08273c.  v2:= new `java.lang.Class`[v2];
  #L082740.  v6:= 0I;
  #L082742.  v7:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L082746.  v2[v6]:= v7 @kind object;
  #L08274a.  v6:= 1I;
  #L08274c.  v2[v6]:= v1 @kind object;
  #L082750.  call temp:= `getMethod`(v3, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L082756.  v1:= temp @kind object;
  #L082758.  v0:= "get" @kind object;
  #L08275c.  v2:= 1I;
  #L08275e.  v2:= new `java.lang.Class`[v2];
  #L082762.  v6:= 0I;
  #L082764.  v7:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L082768.  v2[v6]:= v7 @kind object;
  #L08276c.  call temp:= `getMethod`(v3, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L082772.  v2:= temp @kind object;
  #L082774.  v0:= "remove" @kind object;
  #L082778.  v6:= 1I;
  #L08277a.  v6:= new `java.lang.Class`[v6];
  #L08277e.  v7:= 0I;
  #L082780.  v8:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L082784.  v6[v7]:= v8 @kind object;
  #L082788.  call temp:= `getMethod`(v3, v0, v6) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L08278e.  v3:= temp @kind object;
  #L082790.  v0:= new `a.a.g.c`;
  #L082794.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `La/a/g/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #Try_end0.  
  #L08279a.  return v0 @kind object;
  #L08279c.  v0:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L08279e.  v0:= 0I;
  #L0827a0.  goto L08279a;
  #L0827a2.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L0827a4.  goto L08279e;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L08279c;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L0827a2;
}
procedure `java.lang.String` `a`(`a.a.g.c` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object) @signature `La/a/g/c;.a:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0827cc.  v1:= 0I;
  #Try_start0.  
  #L0827ce.  v0:= v5.`a.a.g.c.b` @type ^`java.lang.reflect.Method` @kind object;
  #L0827d2.  v2:= 0I;
  #L0827d4.  v3:= 1I;
  #L0827d6.  v3:= new `java.lang.Object`[v3];
  #L0827da.  v4:= 0I;
  #L0827dc.  v3[v4]:= v6 @kind object;
  #L0827e0.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0827e6.  v0:= temp @kind object;
  #L0827e8.  call temp:= `getInvocationHandler`(v0) @signature `Ljava/lang/reflect/Proxy;.getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;` @kind static;
  #L0827ee.  v0:= temp @kind object;
  #L0827f0.  v0:= (`a.a.g.c$a`) v0 @kind object;
  #L0827f4.  v2:= v0.`a.a.g.c$a.a` @type ^`boolean` @kind boolean;
  #L0827f8.  if v2 != 0 then goto L08281c;
  #L0827fc.  v2:= v0.`a.a.g.c$a.b` @type ^`java.lang.String` @kind object;
  #L082800.  if v2 != 0 then goto L08281c;
  #L082804.  call temp:= `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @kind static;
  #L08280a.  v0:= temp @kind object;
  #L08280c.  v2:= 4I;
  #L08280e.  v3:= "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?" @kind object;
  #L082812.  v4:= 0I;
  #L082814.  call `a`(v0, v2, v3, v4) @signature `La/a/g/e;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L08281a.  return v1 @kind object;
  #L08281c.  v2:= v0.`a.a.g.c$a.a` @type ^`boolean` @kind boolean;
  #L082820.  if v2 == 0 then goto L08282a;
  #L082824.  v0:= v1 @kind object;
  #L082826.  v1:= v0 @kind object;
  #L082828.  goto L08281a;
  #L08282a.  v0:= v0.`a.a.g.c$a.b` @type ^`java.lang.String` @kind object;
  #Try_end0.  
  #L08282e.  goto L082826;
  #L082830.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L082832.  v0:= new `java.lang.AssertionError`;
  #L082836.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08283c.  throw v0;
  #L08283e.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L082840.  goto L082832;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L08283e;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L082830;
}
procedure `void` `a`(`a.a.g.c` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `La/a/g/c;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L082864.  call temp:= `a`(v8) @signature `La/a/g/c;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L08286a.  v0:= temp @kind object;
  #Try_start0.  
  #L08286c.  v1:= constclass @type ^`a.a.g.e` @kind object;
  #L082870.  call temp:= `getClassLoader`(v1) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L082876.  v1:= temp @kind object;
  #L082878.  v2:= 2I;
  #L08287a.  v2:= new `java.lang.Class`[v2];
  #L08287e.  v3:= 0I;
  #L082880.  v4:= v5.`a.a.g.c.d` @type ^`java.lang.Class` @kind object;
  #L082884.  v2[v3]:= v4 @kind object;
  #L082888.  v3:= 1I;
  #L08288a.  v4:= v5.`a.a.g.c.e` @type ^`java.lang.Class` @kind object;
  #L08288e.  v2[v3]:= v4 @kind object;
  #L082892.  v3:= new `a.a.g.c$a`;
  #L082896.  call `<init>`(v3, v0) @signature `La/a/g/c$a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L08289c.  call temp:= `newProxyInstance`(v1, v2, v3) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L0828a2.  v0:= temp @kind object;
  #L0828a4.  v1:= v5.`a.a.g.c.a` @type ^`java.lang.reflect.Method` @kind object;
  #L0828a8.  v2:= 0I;
  #L0828aa.  v3:= 2I;
  #L0828ac.  v3:= new `java.lang.Object`[v3];
  #L0828b0.  v4:= 0I;
  #L0828b2.  v3[v4]:= v6 @kind object;
  #L0828b6.  v4:= 1I;
  #L0828b8.  v3[v4]:= v0 @kind object;
  #L0828bc.  call temp:= `invoke`(v1, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L0828c2.  return @kind void;
  #L0828c4.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L0828c6.  v1:= new `java.lang.AssertionError`;
  #L0828ca.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L0828d0.  throw v1;
  #L0828d2.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L0828d4.  goto L0828c6;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L0828d2;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L0828c4;
}
procedure `void` `b`(`a.a.g.c` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `La/a/g/c;.b:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L0828f8.  v0:= v4.`a.a.g.c.c` @type ^`java.lang.reflect.Method` @kind object;
  #L0828fc.  v1:= 0I;
  #L0828fe.  v2:= 1I;
  #L082900.  v2:= new `java.lang.Object`[v2];
  #L082904.  v3:= 0I;
  #L082906.  v2[v3]:= v5 @kind object;
  #L08290a.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L082910.  return @kind void;
  #L082912.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L082914.  v0:= new `java.lang.AssertionError`;
  #L082918.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08291e.  throw v0;
  #L082920.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L082922.  goto L082914;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L082912;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L082920;
}
