record `a.a.g.e` @kind class @AccessFlag PUBLIC {
}
global `a.a.g.e` `@@a.a.g.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.logging.Logger` `@@a.a.g.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/g/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L081c08.  call temp:= `a`() @signature `La/a/g/e;.a:()La/a/g/e;` @kind static;
  #L081c0e.  v0:= temp @kind object;
  #L081c10.  `@@a.a.g.e.a` @type ^`a.a.g.e` := v0 @kind object;
  #L081c14.  v0:= constclass @type ^`a.u` @kind object;
  #L081c18.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L081c1e.  v0:= temp @kind object;
  #L081c20.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L081c26.  v0:= temp @kind object;
  #L081c28.  `@@a.a.g.e.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L081c2c.  return @kind void;
}
procedure `void` `<init>`(`a.a.g.e` v0 @kind this) @signature `La/a/g/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L081c40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L081c46.  return @kind void;
}
procedure `a.a.g.e` `a`() @signature `La/a/g/e;.a:()La/a/g/e;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L081c58.  call temp:= `a`() @signature `La/a/g/a;.a:()La/a/g/e;` @kind static;
  #L081c5e.  v0:= temp @kind object;
  #L081c60.  if v0 == 0 then goto L081c66;
  #L081c64.  return v0 @kind object;
  #L081c66.  call temp:= `a`() @signature `La/a/g/b;.a:()La/a/g/b;` @kind static;
  #L081c6c.  v0:= temp @kind object;
  #L081c6e.  if v0 != 0 then goto L081c64;
  #L081c72.  call temp:= `a`() @signature `La/a/g/c;.a:()La/a/g/e;` @kind static;
  #L081c78.  v0:= temp @kind object;
  #L081c7a.  if v0 != 0 then goto L081c64;
  #L081c7e.  v0:= new `a.a.g.e`;
  #L081c82.  call `<init>`(v0) @signature `La/a/g/e;.<init>:()V` @kind direct;
  #L081c88.  goto L081c64;
}
procedure `java.util.List` `a`(`java.util.List` v5 @kind object) @signature `La/a/g/e;.a:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L081c9c.  v2:= new `java.util.ArrayList`;
  #L081ca0.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L081ca6.  v0:= temp;
  #L081ca8.  call `<init>`(v2, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L081cae.  v0:= 0I;
  #L081cb0.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L081cb6.  v3:= temp;
  #L081cb8.  v1:= v0;
  #L081cba.  if v1 >= v3 then goto L081cea;
  #L081cbe.  call temp:= `get`(v5, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L081cc4.  v0:= temp @kind object;
  #L081cc6.  v0:= (`a.v`) v0 @kind object;
  #L081cca.  v4:= `@@a.v.a` @type ^`a.v` @kind object;
  #L081cce.  if v0 != v4 then goto L081cda;
  #L081cd2.  v0:= v1 + 1;
  #L081cd6.  v1:= v0;
  #L081cd8.  goto L081cba;
  #L081cda.  call temp:= `toString`(v0) @signature `La/v;.toString:()Ljava/lang/String;` @kind virtual;
  #L081ce0.  v0:= temp @kind object;
  #L081ce2.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L081ce8.  goto L081cd2;
  #L081cea.  return v2 @kind object;
}
procedure `a.a.g.e` `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L081cfc.  v0:= `@@a.a.g.e.a` @type ^`a.a.g.e` @kind object;
  #L081d00.  return v0 @kind object;
}
procedure `byte`[] `b`(`java.util.List` v5 @kind object) @signature `La/a/g/e;.b:(Ljava/util/List;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L081d14.  v2:= new `b.c`;
  #L081d18.  call `<init>`(v2) @signature `Lb/c;.<init>:()V` @kind direct;
  #L081d1e.  v0:= 0I;
  #L081d20.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L081d26.  v3:= temp;
  #L081d28.  v1:= v0;
  #L081d2a.  if v1 >= v3 then goto L081d70;
  #L081d2e.  call temp:= `get`(v5, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L081d34.  v0:= temp @kind object;
  #L081d36.  v0:= (`a.v`) v0 @kind object;
  #L081d3a.  v4:= `@@a.v.a` @type ^`a.v` @kind object;
  #L081d3e.  if v0 != v4 then goto L081d4a;
  #L081d42.  v0:= v1 + 1;
  #L081d46.  v1:= v0;
  #L081d48.  goto L081d2a;
  #L081d4a.  call temp:= `toString`(v0) @signature `La/v;.toString:()Ljava/lang/String;` @kind virtual;
  #L081d50.  v4:= temp @kind object;
  #L081d52.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L081d58.  v4:= temp;
  #L081d5a.  call temp:= `b`(v2, v4) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L081d60.  call temp:= `toString`(v0) @signature `La/v;.toString:()Ljava/lang/String;` @kind virtual;
  #L081d66.  v0:= temp @kind object;
  #L081d68.  call temp:= `a`(v2, v0) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L081d6e.  goto L081d42;
  #L081d70.  call temp:= `q`(v2) @signature `Lb/c;.q:()[B` @kind virtual;
  #L081d76.  v0:= temp @kind object;
  #L081d78.  return v0 @kind object;
}
procedure `a.a.h.b` `a`(`a.a.g.e` v2 @kind this, `javax.net.ssl.X509TrustManager` v3 @kind object) @signature `La/a/g/e;.a:(Ljavax/net/ssl/X509TrustManager;)La/a/h/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081d8c.  v0:= new `a.a.h.a`;
  #L081d90.  call temp:= `a`(v3) @signature `La/a/h/e;.a:(Ljavax/net/ssl/X509TrustManager;)La/a/h/e;` @kind static;
  #L081d96.  v1:= temp @kind object;
  #L081d98.  call `<init>`(v0, v1) @signature `La/a/h/a;.<init>:(La/a/h/e;)V` @kind direct;
  #L081d9e.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`a.a.g.e` v2 @kind this, `java.lang.String` v3 @kind object) @signature `La/a/g/e;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081db0.  v0:= `@@a.a.g.e.b` @type ^`java.util.logging.Logger` @kind object;
  #L081db4.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L081db8.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L081dbe.  v0:= temp;
  #L081dc0.  if v0 == 0 then goto L081dd0;
  #L081dc4.  v0:= new `java.lang.Throwable`;
  #L081dc8.  call `<init>`(v0, v3) @signature `Ljava/lang/Throwable;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081dce.  return v0 @kind object;
  #L081dd0.  v0:= 0I;
  #L081dd2.  goto L081dce;
}
procedure `java.lang.String` `a`(`a.a.g.e` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object) @signature `La/a/g/e;.a:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L081de4.  v0:= 0I;
  #L081de6.  return v0 @kind object;
}
procedure `void` `a`(`a.a.g.e` v2 @kind this, `int` v3 , `java.lang.String` v4 @kind object, `java.lang.Throwable` v5 @kind object) @signature `La/a/g/e;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081df8.  v0:= 5I;
  #L081dfa.  if v3 != v0 then goto L081e0e;
  #L081dfe.  v0:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L081e02.  v1:= `@@a.a.g.e.b` @type ^`java.util.logging.Logger` @kind object;
  #L081e06.  call `log`(v1, v0, v4, v5) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L081e0c.  return @kind void;
  #L081e0e.  v0:= `@@java.util.logging.Level.INFO` @type ^`java.util.logging.Level` @kind object;
  #L081e12.  goto L081e02;
}
procedure `void` `a`(`a.a.g.e` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `La/a/g/e;.a:(Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081e24.  if v4 != 0 then goto L081e4e;
  #L081e28.  v0:= new `java.lang.StringBuilder`;
  #L081e2c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L081e32.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L081e38.  v0:= temp @kind object;
  #L081e3a.  v1:= " To see where this was allocated, set the OkHttpClient logger level to FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);" @kind object;
  #L081e3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L081e44.  v0:= temp @kind object;
  #L081e46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L081e4c.  v3:= temp @kind object;
  #L081e4e.  v0:= 5I;
  #L081e50.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L081e54.  call `a`(v2, v0, v3, v4) @signature `La/a/g/e;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L081e5a.  return @kind void;
}
procedure `void` `a`(`a.a.g.e` v0 @kind this, `java.net.Socket` v1 @kind object, `java.net.InetSocketAddress` v2 @kind object, `int` v3 ) @signature `La/a/g/e;.a:(Ljava/net/Socket;Ljava/net/InetSocketAddress;I)V` @AccessFlag PUBLIC {
    temp;

  #L081e6c.  call `connect`(v1, v2, v3) @signature `Ljava/net/Socket;.connect:(Ljava/net/SocketAddress;I)V` @kind virtual;
  #L081e72.  return @kind void;
}
procedure `void` `a`(`a.a.g.e` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object, `java.lang.String` v2 @kind object, `java.util.List` v3 @kind object) @signature `La/a/g/e;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L081e84.  return @kind void;
}
procedure `void` `b`(`a.a.g.e` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object) @signature `La/a/g/e;.b:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;

  #L081e98.  return @kind void;
}
procedure `boolean` `b`(`a.a.g.e` v1 @kind this, `java.lang.String` v2 @kind object) @signature `La/a/g/e;.b:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L081eac.  v0:= 1I;
  #L081eae.  return v0;
}
