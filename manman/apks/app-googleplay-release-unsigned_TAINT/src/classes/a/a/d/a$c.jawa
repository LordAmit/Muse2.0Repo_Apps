record `a.a.d.a$c` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$c.d` @AccessFlag FINAL_SYNTHETIC;
  `a.r` `a.a.d.a$c.e` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.d.a$c.f` @AccessFlag PRIVATE;
  `boolean` `a.a.d.a$c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$c` v2 @kind this, `a.a.d.a` v3 @kind object, `a.r` v4 @kind object) @signature `La/a/d/a$c;.<init>:(La/a/d/a;La/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L079b70.  v2.`a.a.d.a$c.d` @type ^`a.a.d.a` := v3 @kind object;
  #L079b74.  v0:= 0I;
  #L079b76.  call `<init>`(v2, v3, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L079b7c.  v0:= -1L;
  #L079b80.  v2.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L079b84.  v0:= 1I;
  #L079b86.  v2.`a.a.d.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L079b8a.  v2.`a.a.d.a$c.e` @type ^`a.r` := v4 @kind object;
  #L079b8e.  return @kind void;
}
procedure `void` `b`(`a.a.d.a$c` v6 @kind this) @signature `La/a/d/a$c;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L079ba0.  v4:= 0L;
  #L079ba4.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L079ba8.  v2:= -1L;
  #L079bac.  v0:= lcmp(v0, v2);
  #L079bb0.  if v0 == 0 then goto L079bc2;
  #L079bb4.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L079bb8.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L079bbc.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #Try_start0.  
  #L079bc2.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L079bc6.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L079bca.  call temp:= `m`(v0) @signature `Lb/e;.m:()J` @kind interface;
  #L079bd0.  v0:= temp @kind wide;
  #L079bd2.  v6.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L079bd6.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L079bda.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L079bde.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L079be4.  v0:= temp @kind object;
  #L079be6.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L079bec.  v0:= temp @kind object;
  #L079bee.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L079bf2.  v1:= lcmp(v2, v4);
  #L079bf6.  if v1 < 0 then goto L079c16;
  #L079bfa.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L079c00.  v1:= temp;
  #L079c02.  if v1 != 0 then goto L079c76;
  #L079c06.  v1:= ";" @kind object;
  #L079c0a.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L079c10.  v1:= temp;
  #L079c12.  if v1 != 0 then goto L079c76;
  #L079c16.  v1:= new `java.net.ProtocolException`;
  #L079c1a.  v2:= new `java.lang.StringBuilder`;
  #L079c1e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L079c24.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L079c28.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079c2e.  v2:= temp @kind object;
  #L079c30.  v4:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L079c34.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L079c3a.  v2:= temp @kind object;
  #L079c3c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079c42.  v0:= temp @kind object;
  #L079c44.  v2:= "\"" @kind object;
  #L079c48.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079c4e.  v0:= temp @kind object;
  #L079c50.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L079c56.  v0:= temp @kind object;
  #L079c58.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079c5e.  throw v1;
  #Try_end0.  
  #L079c60.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L079c62.  v1:= new `java.net.ProtocolException`;
  #L079c66.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L079c6c.  v0:= temp @kind object;
  #L079c6e.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079c74.  throw v1;
  #L079c76.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L079c7a.  v0:= lcmp(v0, v4);
  #L079c7e.  if v0 != 0 then goto L079cb6;
  #L079c82.  v0:= 0I;
  #L079c84.  v6.`a.a.d.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L079c88.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L079c8c.  v0:= v0.`a.a.d.a.a` @type ^`a.u` @kind object;
  #L079c90.  call temp:= `f`(v0) @signature `La/u;.f:()La/m;` @kind virtual;
  #L079c96.  v0:= temp @kind object;
  #L079c98.  v1:= v6.`a.a.d.a$c.e` @type ^`a.r` @kind object;
  #L079c9c.  v2:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L079ca0.  call temp:= `c`(v2) @signature `La/a/d/a;.c:()La/q;` @kind virtual;
  #L079ca6.  v2:= temp @kind object;
  #L079ca8.  call `a`(v0, v1, v2) @signature `La/a/c/e;.a:(La/m;La/r;La/q;)V` @kind static;
  #L079cae.  v0:= 1I;
  #L079cb0.  call `a`(v6, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L079cb6.  return @kind void;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L079c60;
}
procedure `long` `a`(`a.a.d.a$c` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$c;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L079cd8.  v4:= 0L;
  #L079cdc.  v0:= -1L;
  #L079ce0.  v2:= lcmp(v8, v4);
  #L079ce4.  if v2 >= 0 then goto L079d1a;
  #L079ce8.  v0:= new `java.lang.IllegalArgumentException`;
  #L079cec.  v1:= new `java.lang.StringBuilder`;
  #L079cf0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L079cf6.  v2:= "byteCount < 0: " @kind object;
  #L079cfa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079d00.  v1:= temp @kind object;
  #L079d02.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L079d08.  v1:= temp @kind object;
  #L079d0a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L079d10.  v1:= temp @kind object;
  #L079d12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079d18.  throw v0;
  #L079d1a.  v2:= v6.`a.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L079d1e.  if v2 == 0 then goto L079d32;
  #L079d22.  v0:= new `java.lang.IllegalStateException`;
  #L079d26.  v1:= "closed" @kind object;
  #L079d2a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079d30.  throw v0;
  #L079d32.  v2:= v6.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L079d36.  if v2 != 0 then goto L079d3c;
  #L079d3a.  return v0 @kind wide;
  #L079d3c.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L079d40.  v2:= lcmp(v2, v4);
  #L079d44.  if v2 == 0 then goto L079d54;
  #L079d48.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L079d4c.  v2:= lcmp(v2, v0);
  #L079d50.  if v2 != 0 then goto L079d62;
  #L079d54.  call `b`(v6) @signature `La/a/d/a$c;.b:()V` @kind direct;
  #L079d5a.  v2:= v6.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L079d5e.  if v2 == 0 then goto L079d3a;
  #L079d62.  v2:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L079d66.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L079d6a.  v4:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L079d6e.  call temp:= `min`(v8, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L079d74.  v4:= temp @kind wide;
  #L079d76.  call temp:= `a`(v2, v7, v4) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L079d7c.  v2:= temp @kind wide;
  #L079d7e.  v0:= lcmp(v2, v0);
  #L079d82.  if v0 != 0 then goto L079d9e;
  #L079d86.  v0:= 0I;
  #L079d88.  call `a`(v6, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L079d8e.  v0:= new `java.net.ProtocolException`;
  #L079d92.  v1:= "unexpected end of stream" @kind object;
  #L079d96.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079d9c.  throw v0;
  #L079d9e.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L079da2.  v0:= v0 - v2 @kind long;
  #L079da4.  v6.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L079da8.  v0:= v2 @kind wide;
  #L079daa.  goto L079d3a;
}
procedure `void` `close`(`a.a.d.a$c` v2 @kind this) @signature `La/a/d/a$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L079dbc.  v0:= v2.`a.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L079dc0.  if v0 == 0 then goto L079dc6;
  #L079dc4.  return @kind void;
  #L079dc6.  v0:= v2.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L079dca.  if v0 == 0 then goto L079dea;
  #L079dce.  v0:= 100I;
  #L079dd2.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L079dd6.  call temp:= `a`(v2, v0, v1) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L079ddc.  v0:= temp;
  #L079dde.  if v0 != 0 then goto L079dea;
  #L079de2.  v0:= 0I;
  #L079de4.  call `a`(v2, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L079dea.  v0:= 1I;
  #L079dec.  v2.`a.a.d.a$c.b` @type ^`boolean` := v0 @kind boolean;
  #L079df0.  goto L079dc4;
}
