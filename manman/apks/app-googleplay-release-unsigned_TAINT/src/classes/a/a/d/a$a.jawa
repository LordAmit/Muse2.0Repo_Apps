record `a.a.d.a$a` @kind class @AccessFlag ABSTRACT extends `b.r` @kind interface {
  `b.h` `a.a.d.a$a.a` @AccessFlag PROTECTED_FINAL;
  `boolean` `a.a.d.a$a.b` @AccessFlag PROTECTED;
  `a.a.d.a` `a.a.d.a$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`a.a.d.a$a` v2 @kind this, `a.a.d.a` v3 @kind object) @signature `La/a/d/a$a;.<init>:(La/a/d/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0798dc.  v2.`a.a.d.a$a.c` @type ^`a.a.d.a` := v3 @kind object;
  #L0798e0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0798e6.  v0:= new `b.h`;
  #L0798ea.  v1:= v2.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L0798ee.  v1:= v1.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L0798f2.  call temp:= `a`(v1) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L0798f8.  v1:= temp @kind object;
  #L0798fa.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L079900.  v2.`a.a.d.a$a.a` @type ^`b.h` := v0 @kind object;
  #L079904.  return @kind void;
}
procedure `void` `<init>`(`a.a.d.a$a` v0 @kind this, `a.a.d.a` v1 @kind object, `a.a.d.a$1` v2 @kind object) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L079918.  call `<init>`(v0, v1) @signature `La/a/d/a$a;.<init>:(La/a/d/a;)V` @kind direct;
  #L07991e.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$a` v1 @kind this) @signature `La/a/d/a$a;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L079930.  v0:= v1.`a.a.d.a$a.a` @type ^`b.h` @kind object;
  #L079934.  return v0 @kind object;
}
procedure `void` `a`(`a.a.d.a$a` v3 @kind this, `boolean` v4 ) @signature `La/a/d/a$a;.a:(Z)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L079948.  v2:= 6I;
  #L07994a.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07994e.  v0:= v0.`a.a.d.a.e` @type ^`int`;
  #L079952.  if v0 != v2 then goto L079958;
  #L079956.  return @kind void;
  #L079958.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07995c.  v0:= v0.`a.a.d.a.e` @type ^`int`;
  #L079960.  v1:= 5I;
  #L079962.  if v0 == v1 then goto L0799a0;
  #L079966.  v0:= new `java.lang.IllegalStateException`;
  #L07996a.  v1:= new `java.lang.StringBuilder`;
  #L07996e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L079974.  v2:= "state: " @kind object;
  #L079978.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07997e.  v1:= temp @kind object;
  #L079980.  v2:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L079984.  v2:= v2.`a.a.d.a.e` @type ^`int`;
  #L079988.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07998e.  v1:= temp @kind object;
  #L079990.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L079996.  v1:= temp @kind object;
  #L079998.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07999e.  throw v0;
  #L0799a0.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L0799a4.  v1:= v3.`a.a.d.a$a.a` @type ^`b.h` @kind object;
  #L0799a8.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L0799ae.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L0799b2.  v0.`a.a.d.a.e` @type ^`int` := v2;
  #L0799b6.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L0799ba.  v0:= v0.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L0799be.  if v0 == 0 then goto L079956;
  #L0799c2.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L0799c6.  v1:= v0.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L0799ca.  if v4 != 0 then goto L0799dc;
  #L0799ce.  v0:= 1I;
  #L0799d0.  v2:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L0799d4.  call `a`(v1, v0, v2) @signature `La/a/b/g;.a:(ZLa/a/c/c;)V` @kind virtual;
  #L0799da.  goto L079956;
  #L0799dc.  v0:= 0I;
  #L0799de.  goto L0799d0;
}
