record `a.a.d.a$e` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$e.d` @AccessFlag FINAL_SYNTHETIC;
  `long` `a.a.d.a$e.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$e` v4 @kind this, `a.a.d.a` v5 @kind object, `long` v6 ) @signature `La/a/d/a$e;.<init>:(La/a/d/a;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L079f90.  v4.`a.a.d.a$e.d` @type ^`a.a.d.a` := v5 @kind object;
  #L079f94.  v0:= 0I;
  #L079f96.  call `<init>`(v4, v5, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L079f9c.  v4.`a.a.d.a$e.e` @type ^`long` := v6 @kind wide;
  #L079fa0.  v0:= v4.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L079fa4.  v2:= 0L;
  #L079fa8.  v0:= lcmp(v0, v2);
  #L079fac.  if v0 != 0 then goto L079fb8;
  #L079fb0.  v0:= 1I;
  #L079fb2.  call `a`(v4, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L079fb8.  return @kind void;
}
procedure `long` `a`(`a.a.d.a$e` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `La/a/d/a$e;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L079fcc.  v0:= -1L;
  #L079fd0.  v6:= 0L;
  #L079fd4.  v2:= lcmp(v10, v6);
  #L079fd8.  if v2 >= 0 then goto L07a00e;
  #L079fdc.  v0:= new `java.lang.IllegalArgumentException`;
  #L079fe0.  v1:= new `java.lang.StringBuilder`;
  #L079fe4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L079fea.  v2:= "byteCount < 0: " @kind object;
  #L079fee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079ff4.  v1:= temp @kind object;
  #L079ff6.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L079ffc.  v1:= temp @kind object;
  #L079ffe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a004.  v1:= temp @kind object;
  #L07a006.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a00c.  throw v0;
  #L07a00e.  v2:= v8.`a.a.d.a$e.b` @type ^`boolean` @kind boolean;
  #L07a012.  if v2 == 0 then goto L07a026;
  #L07a016.  v0:= new `java.lang.IllegalStateException`;
  #L07a01a.  v1:= "closed" @kind object;
  #L07a01e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a024.  throw v0;
  #L07a026.  v2:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a02a.  v2:= lcmp(v2, v6);
  #L07a02e.  if v2 != 0 then goto L07a034;
  #L07a032.  return v0 @kind wide;
  #L07a034.  v2:= v8.`a.a.d.a$e.d` @type ^`a.a.d.a` @kind object;
  #L07a038.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a03c.  v4:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a040.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07a046.  v4:= temp @kind wide;
  #L07a048.  call temp:= `a`(v2, v9, v4) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07a04e.  v2:= temp @kind wide;
  #L07a050.  v0:= lcmp(v2, v0);
  #L07a054.  if v0 != 0 then goto L07a070;
  #L07a058.  v0:= 0I;
  #L07a05a.  call `a`(v8, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07a060.  v0:= new `java.net.ProtocolException`;
  #L07a064.  v1:= "unexpected end of stream" @kind object;
  #L07a068.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a06e.  throw v0;
  #L07a070.  v0:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a074.  v0:= v0 - v2 @kind long;
  #L07a076.  v8.`a.a.d.a$e.e` @type ^`long` := v0 @kind wide;
  #L07a07a.  v0:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a07e.  v0:= lcmp(v0, v6);
  #L07a082.  if v0 != 0 then goto L07a08e;
  #L07a086.  v0:= 1I;
  #L07a088.  call `a`(v8, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07a08e.  v0:= v2 @kind wide;
  #L07a090.  goto L07a032;
}
procedure `void` `close`(`a.a.d.a$e` v4 @kind this) @signature `La/a/d/a$e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a0a4.  v0:= v4.`a.a.d.a$e.b` @type ^`boolean` @kind boolean;
  #L07a0a8.  if v0 == 0 then goto L07a0ae;
  #L07a0ac.  return @kind void;
  #L07a0ae.  v0:= v4.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a0b2.  v2:= 0L;
  #L07a0b6.  v0:= lcmp(v0, v2);
  #L07a0ba.  if v0 == 0 then goto L07a0da;
  #L07a0be.  v0:= 100I;
  #L07a0c2.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07a0c6.  call temp:= `a`(v4, v0, v1) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L07a0cc.  v0:= temp;
  #L07a0ce.  if v0 != 0 then goto L07a0da;
  #L07a0d2.  v0:= 0I;
  #L07a0d4.  call `a`(v4, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07a0da.  v0:= 1I;
  #L07a0dc.  v4.`a.a.d.a$e.b` @type ^`boolean` := v0 @kind boolean;
  #L07a0e0.  goto L07a0ac;
}
