record `a.a.d.a` @kind class @AccessFlag PUBLIC_FINAL extends `a.a.c.c` @kind interface {
  `a.u` `a.a.d.a.a` @AccessFlag FINAL;
  `a.a.b.g` `a.a.d.a.b` @AccessFlag FINAL;
  `b.e` `a.a.d.a.c` @AccessFlag FINAL;
  `b.d` `a.a.d.a.d` @AccessFlag FINAL;
  `int` `a.a.d.a.e` @AccessFlag ;
}
procedure `void` `<init>`(`a.a.d.a` v1 @kind this, `a.u` v2 @kind object, `a.a.b.g` v3 @kind object, `b.e` v4 @kind object, `b.d` v5 @kind object) @signature `La/a/d/a;.<init>:(La/u;La/a/b/g;Lb/e;Lb/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L07a1e8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07a1ee.  v0:= 0I;
  #L07a1f0.  v1.`a.a.d.a.e` @type ^`int` := v0;
  #L07a1f4.  v1.`a.a.d.a.a` @type ^`a.u` := v2 @kind object;
  #L07a1f8.  v1.`a.a.d.a.b` @type ^`a.a.b.g` := v3 @kind object;
  #L07a1fc.  v1.`a.a.d.a.c` @type ^`b.e` := v4 @kind object;
  #L07a200.  v1.`a.a.d.a.d` @type ^`b.d` := v5 @kind object;
  #L07a204.  return @kind void;
}
procedure `b.r` `b`(`a.a.d.a` v4 @kind this, `a.z` v5 @kind object) @signature `La/a/d/a;.b:(La/z;)Lb/r;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a218.  call temp:= `b`(v5) @signature `La/a/c/e;.b:(La/z;)Z` @kind static;
  #L07a21e.  v0:= temp;
  #L07a220.  if v0 != 0 then goto L07a232;
  #L07a224.  v0:= 0L;
  #L07a228.  call temp:= `b`(v4, v0) @signature `La/a/d/a;.b:(J)Lb/r;` @kind virtual;
  #L07a22e.  v0:= temp @kind object;
  #L07a230.  return v0 @kind object;
  #L07a232.  v0:= "chunked" @kind object;
  #L07a236.  v1:= "Transfer-Encoding" @kind object;
  #L07a23a.  call temp:= `a`(v5, v1) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07a240.  v1:= temp @kind object;
  #L07a242.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L07a248.  v0:= temp;
  #L07a24a.  if v0 == 0 then goto L07a268;
  #L07a24e.  call temp:= `a`(v5) @signature `La/z;.a:()La/x;` @kind virtual;
  #L07a254.  v0:= temp @kind object;
  #L07a256.  call temp:= `a`(v0) @signature `La/x;.a:()La/r;` @kind virtual;
  #L07a25c.  v0:= temp @kind object;
  #L07a25e.  call temp:= `a`(v4, v0) @signature `La/a/d/a;.a:(La/r;)Lb/r;` @kind virtual;
  #L07a264.  v0:= temp @kind object;
  #L07a266.  goto L07a230;
  #L07a268.  call temp:= `a`(v5) @signature `La/a/c/e;.a:(La/z;)J` @kind static;
  #L07a26e.  v0:= temp @kind wide;
  #L07a270.  v2:= -1L;
  #L07a274.  v2:= lcmp(v0, v2);
  #L07a278.  if v2 == 0 then goto L07a286;
  #L07a27c.  call temp:= `b`(v4, v0) @signature `La/a/d/a;.b:(J)Lb/r;` @kind virtual;
  #L07a282.  v0:= temp @kind object;
  #L07a284.  goto L07a230;
  #L07a286.  call temp:= `e`(v4) @signature `La/a/d/a;.e:()Lb/r;` @kind virtual;
  #L07a28c.  v0:= temp @kind object;
  #L07a28e.  goto L07a230;
}
procedure `a.aa` `a`(`a.a.d.a` v3 @kind this, `a.z` v4 @kind object) @signature `La/a/d/a;.a:(La/z;)La/aa;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07a2a0.  call temp:= `b`(v3, v4) @signature `La/a/d/a;.b:(La/z;)Lb/r;` @kind direct;
  #L07a2a6.  v0:= temp @kind object;
  #L07a2a8.  v1:= new `a.a.c.h`;
  #L07a2ac.  call temp:= `e`(v4) @signature `La/z;.e:()La/q;` @kind virtual;
  #L07a2b2.  v2:= temp @kind object;
  #L07a2b4.  call temp:= `a`(v0) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L07a2ba.  v0:= temp @kind object;
  #L07a2bc.  call `<init>`(v1, v2, v0) @signature `La/a/c/h;.<init>:(La/q;Lb/e;)V` @kind direct;
  #L07a2c2.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.a.d.a` v4 @kind this, `boolean` v5 ) @signature `La/a/d/a;.a:(Z)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a2d4.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07a2d8.  v1:= 1I;
  #L07a2da.  if v0 == v1 then goto L07a31e;
  #L07a2de.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07a2e2.  v1:= 3I;
  #L07a2e4.  if v0 == v1 then goto L07a31e;
  #L07a2e8.  v0:= new `java.lang.IllegalStateException`;
  #L07a2ec.  v1:= new `java.lang.StringBuilder`;
  #L07a2f0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a2f6.  v2:= "state: " @kind object;
  #L07a2fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a300.  v1:= temp @kind object;
  #L07a302.  v2:= v4.`a.a.d.a.e` @type ^`int`;
  #L07a306.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a30c.  v1:= temp @kind object;
  #L07a30e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a314.  v1:= temp @kind object;
  #L07a316.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a31c.  throw v0;
  #Try_start0.  
  #L07a31e.  v0:= v4.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a322.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07a328.  v0:= temp @kind object;
  #L07a32a.  call temp:= `a`(v0) @signature `La/a/c/k;.a:(Ljava/lang/String;)La/a/c/k;` @kind static;
  #L07a330.  v1:= temp @kind object;
  #L07a332.  v0:= new `a.z$a`;
  #L07a336.  call `<init>`(v0) @signature `La/z$a;.<init>:()V` @kind direct;
  #L07a33c.  v2:= v1.`a.a.c.k.a` @type ^`a.v` @kind object;
  #L07a340.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(La/v;)La/z$a;` @kind virtual;
  #L07a346.  v0:= temp @kind object;
  #L07a348.  v2:= v1.`a.a.c.k.b` @type ^`int`;
  #L07a34c.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(I)La/z$a;` @kind virtual;
  #L07a352.  v0:= temp @kind object;
  #L07a354.  v2:= v1.`a.a.c.k.c` @type ^`java.lang.String` @kind object;
  #L07a358.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;)La/z$a;` @kind virtual;
  #L07a35e.  v0:= temp @kind object;
  #L07a360.  call temp:= `c`(v4) @signature `La/a/d/a;.c:()La/q;` @kind virtual;
  #L07a366.  v2:= temp @kind object;
  #L07a368.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(La/q;)La/z$a;` @kind virtual;
  #L07a36e.  v0:= temp @kind object;
  #L07a370.  if v5 == 0 then goto L07a384;
  #L07a374.  v1:= v1.`a.a.c.k.b` @type ^`int`;
  #L07a378.  v2:= 100I;
  #L07a37c.  if v1 != v2 then goto L07a384;
  #L07a380.  v0:= 0I;
  #L07a382.  return v0 @kind object;
  #L07a384.  v1:= 4I;
  #L07a386.  v4.`a.a.d.a.e` @type ^`int` := v1;
  #Try_end0.  
  #L07a38a.  goto L07a382;
  #L07a38c.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L07a38e.  v1:= new `java.io.IOException`;
  #L07a392.  v2:= new `java.lang.StringBuilder`;
  #L07a396.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a39c.  v3:= "unexpected end of stream on " @kind object;
  #L07a3a0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a3a6.  v2:= temp @kind object;
  #L07a3a8.  v3:= v4.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07a3ac.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a3b2.  v2:= temp @kind object;
  #L07a3b4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a3ba.  v2:= temp @kind object;
  #L07a3bc.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a3c2.  call temp:= `initCause`(v1, v0) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L07a3c8.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L07a38c;
}
procedure `b.q` `a`(`a.a.d.a` v3 @kind this, `long` v4 ) @signature `La/a/d/a;.a:(J)Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07a3ec.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a3f0.  v1:= 1I;
  #L07a3f2.  if v0 == v1 then goto L07a42c;
  #L07a3f6.  v0:= new `java.lang.IllegalStateException`;
  #L07a3fa.  v1:= new `java.lang.StringBuilder`;
  #L07a3fe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a404.  v2:= "state: " @kind object;
  #L07a408.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a40e.  v1:= temp @kind object;
  #L07a410.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a414.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a41a.  v1:= temp @kind object;
  #L07a41c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a422.  v1:= temp @kind object;
  #L07a424.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a42a.  throw v0;
  #L07a42c.  v0:= 2I;
  #L07a42e.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07a432.  v0:= new `a.a.d.a$d`;
  #L07a436.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$d;.<init>:(La/a/d/a;J)V` @kind direct;
  #L07a43c.  return v0 @kind object;
}
procedure `b.q` `a`(`a.a.d.a` v2 @kind this, `a.x` v3 @kind object, `long` v4 ) @signature `La/a/d/a;.a:(La/x;J)Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07a450.  v0:= "chunked" @kind object;
  #L07a454.  v1:= "Transfer-Encoding" @kind object;
  #L07a458.  call temp:= `a`(v3, v1) @signature `La/x;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07a45e.  v1:= temp @kind object;
  #L07a460.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L07a466.  v0:= temp;
  #L07a468.  if v0 == 0 then goto L07a476;
  #L07a46c.  call temp:= `d`(v2) @signature `La/a/d/a;.d:()Lb/q;` @kind virtual;
  #L07a472.  v0:= temp @kind object;
  #L07a474.  return v0 @kind object;
  #L07a476.  v0:= -1L;
  #L07a47a.  v0:= lcmp(v4, v0);
  #L07a47e.  if v0 == 0 then goto L07a48c;
  #L07a482.  call temp:= `a`(v2, v4) @signature `La/a/d/a;.a:(J)Lb/q;` @kind virtual;
  #L07a488.  v0:= temp @kind object;
  #L07a48a.  goto L07a474;
  #L07a48c.  v0:= new `java.lang.IllegalStateException`;
  #L07a490.  v1:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L07a494.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a49a.  throw v0;
}
procedure `b.r` `a`(`a.a.d.a` v3 @kind this, `a.r` v4 @kind object) @signature `La/a/d/a;.a:(La/r;)Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07a4ac.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a4b0.  v1:= 4I;
  #L07a4b2.  if v0 == v1 then goto L07a4ec;
  #L07a4b6.  v0:= new `java.lang.IllegalStateException`;
  #L07a4ba.  v1:= new `java.lang.StringBuilder`;
  #L07a4be.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a4c4.  v2:= "state: " @kind object;
  #L07a4c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a4ce.  v1:= temp @kind object;
  #L07a4d0.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a4d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a4da.  v1:= temp @kind object;
  #L07a4dc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a4e2.  v1:= temp @kind object;
  #L07a4e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a4ea.  throw v0;
  #L07a4ec.  v0:= 5I;
  #L07a4ee.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07a4f2.  v0:= new `a.a.d.a$c`;
  #L07a4f6.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$c;.<init>:(La/a/d/a;La/r;)V` @kind direct;
  #L07a4fc.  return v0 @kind object;
}
procedure `void` `a`(`a.a.d.a` v1 @kind this) @signature `La/a/d/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07a510.  v0:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a514.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07a51a.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v4 @kind this, `a.q` v5 @kind object, `java.lang.String` v6 @kind object) @signature `La/a/d/a;.a:(La/q;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a52c.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07a530.  if v0 == 0 then goto L07a56a;
  #L07a534.  v0:= new `java.lang.IllegalStateException`;
  #L07a538.  v1:= new `java.lang.StringBuilder`;
  #L07a53c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a542.  v2:= "state: " @kind object;
  #L07a546.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a54c.  v1:= temp @kind object;
  #L07a54e.  v2:= v4.`a.a.d.a.e` @type ^`int`;
  #L07a552.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a558.  v1:= temp @kind object;
  #L07a55a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a560.  v1:= temp @kind object;
  #L07a562.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a568.  throw v0;
  #L07a56a.  v0:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a56e.  call temp:= `b`(v0, v6) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a574.  v0:= temp @kind object;
  #L07a576.  v1:= "\r\n" @kind object;
  #L07a57a.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a580.  v0:= 0I;
  #L07a582.  call temp:= `a`(v5) @signature `La/q;.a:()I` @kind virtual;
  #L07a588.  v1:= temp;
  #L07a58a.  if v0 >= v1 then goto L07a5ce;
  #L07a58e.  v2:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a592.  call temp:= `a`(v5, v0) @signature `La/q;.a:(I)Ljava/lang/String;` @kind virtual;
  #L07a598.  v3:= temp @kind object;
  #L07a59a.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a5a0.  v2:= temp @kind object;
  #L07a5a2.  v3:= ": " @kind object;
  #L07a5a6.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a5ac.  v2:= temp @kind object;
  #L07a5ae.  call temp:= `b`(v5, v0) @signature `La/q;.b:(I)Ljava/lang/String;` @kind virtual;
  #L07a5b4.  v3:= temp @kind object;
  #L07a5b6.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a5bc.  v2:= temp @kind object;
  #L07a5be.  v3:= "\r\n" @kind object;
  #L07a5c2.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a5c8.  v0:= v0 + 1;
  #L07a5cc.  goto L07a58a;
  #L07a5ce.  v0:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a5d2.  v1:= "\r\n" @kind object;
  #L07a5d6.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a5dc.  v0:= 1I;
  #L07a5de.  v4.`a.a.d.a.e` @type ^`int` := v0;
  #L07a5e2.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v2 @kind this, `a.x` v3 @kind object) @signature `La/a/d/a;.a:(La/x;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07a5f4.  v0:= v2.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07a5f8.  call temp:= `b`(v0) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L07a5fe.  v0:= temp @kind object;
  #L07a600.  call temp:= `a`(v0) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L07a606.  v0:= temp @kind object;
  #L07a608.  call temp:= `b`(v0) @signature `La/ab;.b:()Ljava/net/Proxy;` @kind virtual;
  #L07a60e.  v0:= temp @kind object;
  #L07a610.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L07a616.  v0:= temp @kind object;
  #L07a618.  call temp:= `a`(v3, v0) @signature `La/a/c/i;.a:(La/x;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L07a61e.  v0:= temp @kind object;
  #L07a620.  call temp:= `c`(v3) @signature `La/x;.c:()La/q;` @kind virtual;
  #L07a626.  v1:= temp @kind object;
  #L07a628.  call `a`(v2, v1, v0) @signature `La/a/d/a;.a:(La/q;Ljava/lang/String;)V` @kind virtual;
  #L07a62e.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v2 @kind this, `b.h` v3 @kind object) @signature `La/a/d/a;.a:(Lb/h;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L07a640.  call temp:= `a`(v3) @signature `Lb/h;.a:()Lb/s;` @kind virtual;
  #L07a646.  v0:= temp @kind object;
  #L07a648.  v1:= `@@b.s.b` @type ^`b.s` @kind object;
  #L07a64c.  call temp:= `a`(v3, v1) @signature `Lb/h;.a:(Lb/s;)Lb/h;` @kind virtual;
  #L07a652.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07a658.  call temp:= `d_`(v0) @signature `Lb/s;.d_:()Lb/s;` @kind virtual;
  #L07a65e.  return @kind void;
}
procedure `b.r` `b`(`a.a.d.a` v3 @kind this, `long` v4 ) @signature `La/a/d/a;.b:(J)Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07a670.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a674.  v1:= 4I;
  #L07a676.  if v0 == v1 then goto L07a6b0;
  #L07a67a.  v0:= new `java.lang.IllegalStateException`;
  #L07a67e.  v1:= new `java.lang.StringBuilder`;
  #L07a682.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a688.  v2:= "state: " @kind object;
  #L07a68c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a692.  v1:= temp @kind object;
  #L07a694.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a698.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a69e.  v1:= temp @kind object;
  #L07a6a0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a6a6.  v1:= temp @kind object;
  #L07a6a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a6ae.  throw v0;
  #L07a6b0.  v0:= 5I;
  #L07a6b2.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07a6b6.  v0:= new `a.a.d.a$e`;
  #L07a6ba.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$e;.<init>:(La/a/d/a;J)V` @kind direct;
  #L07a6c0.  return v0 @kind object;
}
procedure `void` `b`(`a.a.d.a` v1 @kind this) @signature `La/a/d/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07a6d4.  v0:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a6d8.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07a6de.  return @kind void;
}
procedure `a.q` `c`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.c:()La/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07a6f0.  v0:= new `a.q$a`;
  #L07a6f4.  call `<init>`(v0) @signature `La/q$a;.<init>:()V` @kind direct;
  #L07a6fa.  v1:= v3.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a6fe.  call temp:= `p`(v1) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07a704.  v1:= temp @kind object;
  #L07a706.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07a70c.  v2:= temp;
  #L07a70e.  if v2 == 0 then goto L07a71e;
  #L07a712.  v2:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07a716.  call `a`(v2, v0, v1) @signature `La/a/a;.a:(La/q$a;Ljava/lang/String;)V` @kind virtual;
  #L07a71c.  goto L07a6fa;
  #L07a71e.  call temp:= `a`(v0) @signature `La/q$a;.a:()La/q;` @kind virtual;
  #L07a724.  v0:= temp @kind object;
  #L07a726.  return v0 @kind object;
}
procedure `b.q` `d`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.d:()Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07a738.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a73c.  v1:= 1I;
  #L07a73e.  if v0 == v1 then goto L07a778;
  #L07a742.  v0:= new `java.lang.IllegalStateException`;
  #L07a746.  v1:= new `java.lang.StringBuilder`;
  #L07a74a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a750.  v2:= "state: " @kind object;
  #L07a754.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a75a.  v1:= temp @kind object;
  #L07a75c.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a760.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a766.  v1:= temp @kind object;
  #L07a768.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a76e.  v1:= temp @kind object;
  #L07a770.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a776.  throw v0;
  #L07a778.  v0:= 2I;
  #L07a77a.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07a77e.  v0:= new `a.a.d.a$b`;
  #L07a782.  call `<init>`(v0, v3) @signature `La/a/d/a$b;.<init>:(La/a/d/a;)V` @kind direct;
  #L07a788.  return v0 @kind object;
}
procedure `b.r` `e`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.e:()Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07a79c.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a7a0.  v1:= 4I;
  #L07a7a2.  if v0 == v1 then goto L07a7dc;
  #L07a7a6.  v0:= new `java.lang.IllegalStateException`;
  #L07a7aa.  v1:= new `java.lang.StringBuilder`;
  #L07a7ae.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a7b4.  v2:= "state: " @kind object;
  #L07a7b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a7be.  v1:= temp @kind object;
  #L07a7c0.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07a7c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a7ca.  v1:= temp @kind object;
  #L07a7cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a7d2.  v1:= temp @kind object;
  #L07a7d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a7da.  throw v0;
  #L07a7dc.  v0:= v3.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07a7e0.  if v0 != 0 then goto L07a7f4;
  #L07a7e4.  v0:= new `java.lang.IllegalStateException`;
  #L07a7e8.  v1:= "streamAllocation == null" @kind object;
  #L07a7ec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a7f2.  throw v0;
  #L07a7f4.  v0:= 5I;
  #L07a7f6.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07a7fa.  v0:= v3.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07a7fe.  call `d`(v0) @signature `La/a/b/g;.d:()V` @kind virtual;
  #L07a804.  v0:= new `a.a.d.a$f`;
  #L07a808.  call `<init>`(v0, v3) @signature `La/a/d/a$f;.<init>:(La/a/d/a;)V` @kind direct;
  #L07a80e.  return v0 @kind object;
}
