record `a.z$a` @kind class @AccessFlag PUBLIC {
  `a.x` `a.z$a.a` @AccessFlag ;
  `a.v` `a.z$a.b` @AccessFlag ;
  `int` `a.z$a.c` @AccessFlag ;
  `java.lang.String` `a.z$a.d` @AccessFlag ;
  `a.p` `a.z$a.e` @AccessFlag ;
  `a.q$a` `a.z$a.f` @AccessFlag ;
  `a.aa` `a.z$a.g` @AccessFlag ;
  `a.z` `a.z$a.h` @AccessFlag ;
  `a.z` `a.z$a.i` @AccessFlag ;
  `a.z` `a.z$a.j` @AccessFlag ;
  `long` `a.z$a.k` @AccessFlag ;
  `long` `a.z$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`a.z$a` v1 @kind this) @signature `La/z$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L08b898.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08b89e.  v0:= -1I;
  #L08b8a0.  v1.`a.z$a.c` @type ^`int` := v0;
  #L08b8a4.  v0:= new `a.q$a`;
  #L08b8a8.  call `<init>`(v0) @signature `La/q$a;.<init>:()V` @kind direct;
  #L08b8ae.  v1.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08b8b2.  return @kind void;
}
procedure `void` `<init>`(`a.z$a` v2 @kind this, `a.z` v3 @kind object) @signature `La/z$a;.<init>:(La/z;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L08b8c4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08b8ca.  v0:= -1I;
  #L08b8cc.  v2.`a.z$a.c` @type ^`int` := v0;
  #L08b8d0.  v0:= v3.`a.z.a` @type ^`a.x` @kind object;
  #L08b8d4.  v2.`a.z$a.a` @type ^`a.x` := v0 @kind object;
  #L08b8d8.  v0:= v3.`a.z.b` @type ^`a.v` @kind object;
  #L08b8dc.  v2.`a.z$a.b` @type ^`a.v` := v0 @kind object;
  #L08b8e0.  v0:= v3.`a.z.c` @type ^`int`;
  #L08b8e4.  v2.`a.z$a.c` @type ^`int` := v0;
  #L08b8e8.  v0:= v3.`a.z.d` @type ^`java.lang.String` @kind object;
  #L08b8ec.  v2.`a.z$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L08b8f0.  v0:= v3.`a.z.e` @type ^`a.p` @kind object;
  #L08b8f4.  v2.`a.z$a.e` @type ^`a.p` := v0 @kind object;
  #L08b8f8.  v0:= v3.`a.z.f` @type ^`a.q` @kind object;
  #L08b8fc.  call temp:= `b`(v0) @signature `La/q;.b:()La/q$a;` @kind virtual;
  #L08b902.  v0:= temp @kind object;
  #L08b904.  v2.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08b908.  v0:= v3.`a.z.g` @type ^`a.aa` @kind object;
  #L08b90c.  v2.`a.z$a.g` @type ^`a.aa` := v0 @kind object;
  #L08b910.  v0:= v3.`a.z.h` @type ^`a.z` @kind object;
  #L08b914.  v2.`a.z$a.h` @type ^`a.z` := v0 @kind object;
  #L08b918.  v0:= v3.`a.z.i` @type ^`a.z` @kind object;
  #L08b91c.  v2.`a.z$a.i` @type ^`a.z` := v0 @kind object;
  #L08b920.  v0:= v3.`a.z.j` @type ^`a.z` @kind object;
  #L08b924.  v2.`a.z$a.j` @type ^`a.z` := v0 @kind object;
  #L08b928.  v0:= v3.`a.z.k` @type ^`long` @kind wide;
  #L08b92c.  v2.`a.z$a.k` @type ^`long` := v0 @kind wide;
  #L08b930.  v0:= v3.`a.z.l` @type ^`long` @kind wide;
  #L08b934.  v2.`a.z$a.l` @type ^`long` := v0 @kind wide;
  #L08b938.  return @kind void;
}
procedure `void` `a`(`a.z$a` v3 @kind this, `java.lang.String` v4 @kind object, `a.z` v5 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L08b94c.  v0:= v5.`a.z.g` @type ^`a.aa` @kind object;
  #L08b950.  if v0 == 0 then goto L08b986;
  #L08b954.  v0:= new `java.lang.IllegalArgumentException`;
  #L08b958.  v1:= new `java.lang.StringBuilder`;
  #L08b95c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08b962.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b968.  v1:= temp @kind object;
  #L08b96a.  v2:= ".body != null" @kind object;
  #L08b96e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b974.  v1:= temp @kind object;
  #L08b976.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b97c.  v1:= temp @kind object;
  #L08b97e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08b984.  throw v0;
  #L08b986.  v0:= v5.`a.z.h` @type ^`a.z` @kind object;
  #L08b98a.  if v0 == 0 then goto L08b9c0;
  #L08b98e.  v0:= new `java.lang.IllegalArgumentException`;
  #L08b992.  v1:= new `java.lang.StringBuilder`;
  #L08b996.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08b99c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b9a2.  v1:= temp @kind object;
  #L08b9a4.  v2:= ".networkResponse != null" @kind object;
  #L08b9a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b9ae.  v1:= temp @kind object;
  #L08b9b0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b9b6.  v1:= temp @kind object;
  #L08b9b8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08b9be.  throw v0;
  #L08b9c0.  v0:= v5.`a.z.i` @type ^`a.z` @kind object;
  #L08b9c4.  if v0 == 0 then goto L08b9fa;
  #L08b9c8.  v0:= new `java.lang.IllegalArgumentException`;
  #L08b9cc.  v1:= new `java.lang.StringBuilder`;
  #L08b9d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08b9d6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b9dc.  v1:= temp @kind object;
  #L08b9de.  v2:= ".cacheResponse != null" @kind object;
  #L08b9e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b9e8.  v1:= temp @kind object;
  #L08b9ea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b9f0.  v1:= temp @kind object;
  #L08b9f2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08b9f8.  throw v0;
  #L08b9fa.  v0:= v5.`a.z.j` @type ^`a.z` @kind object;
  #L08b9fe.  if v0 == 0 then goto L08ba34;
  #L08ba02.  v0:= new `java.lang.IllegalArgumentException`;
  #L08ba06.  v1:= new `java.lang.StringBuilder`;
  #L08ba0a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08ba10.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ba16.  v1:= temp @kind object;
  #L08ba18.  v2:= ".priorResponse != null" @kind object;
  #L08ba1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ba22.  v1:= temp @kind object;
  #L08ba24.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08ba2a.  v1:= temp @kind object;
  #L08ba2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08ba32.  throw v0;
  #L08ba34.  return @kind void;
}
procedure `void` `d`(`a.z$a` v2 @kind this, `a.z` v3 @kind object) @signature `La/z$a;.d:(La/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L08ba48.  v0:= v3.`a.z.g` @type ^`a.aa` @kind object;
  #L08ba4c.  if v0 == 0 then goto L08ba60;
  #L08ba50.  v0:= new `java.lang.IllegalArgumentException`;
  #L08ba54.  v1:= "priorResponse.body != null" @kind object;
  #L08ba58.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08ba5e.  throw v0;
  #L08ba60.  return @kind void;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `int` v1 ) @signature `La/z$a;.a:(I)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08ba74.  v0.`a.z$a.c` @type ^`int` := v1;
  #L08ba78.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `long` v2 ) @signature `La/z$a;.a:(J)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08ba8c.  v1.`a.z$a.k` @type ^`long` := v2 @kind wide;
  #L08ba90.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.aa` v1 @kind object) @signature `La/z$a;.a:(La/aa;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08baa4.  v0.`a.z$a.g` @type ^`a.aa` := v1 @kind object;
  #L08baa8.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.p` v1 @kind object) @signature `La/z$a;.a:(La/p;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08babc.  v0.`a.z$a.e` @type ^`a.p` := v1 @kind object;
  #L08bac0.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `a.q` v2 @kind object) @signature `La/z$a;.a:(La/q;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bad4.  call temp:= `b`(v2) @signature `La/q;.b:()La/q$a;` @kind virtual;
  #L08bada.  v0:= temp @kind object;
  #L08badc.  v1.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08bae0.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.v` v1 @kind object) @signature `La/z$a;.a:(La/v;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08baf4.  v0.`a.z$a.b` @type ^`a.v` := v1 @kind object;
  #L08baf8.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.x` v1 @kind object) @signature `La/z$a;.a:(La/x;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08bb0c.  v0.`a.z$a.a` @type ^`a.x` := v1 @kind object;
  #L08bb10.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `a.z` v2 @kind object) @signature `La/z$a;.a:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bb24.  if v2 == 0 then goto L08bb32;
  #L08bb28.  v0:= "networkResponse" @kind object;
  #L08bb2c.  call `a`(v1, v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @kind direct;
  #L08bb32.  v1.`a.z$a.h` @type ^`a.z` := v2 @kind object;
  #L08bb36.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08bb48.  v0.`a.z$a.d` @type ^`java.lang.String` := v1 @kind object;
  #L08bb4c.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;Ljava/lang/String;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bb60.  v0:= v1.`a.z$a.f` @type ^`a.q$a` @kind object;
  #L08bb64.  call temp:= `a`(v0, v2, v3) @signature `La/q$a;.a:(Ljava/lang/String;Ljava/lang/String;)La/q$a;` @kind virtual;
  #L08bb6a.  return v1 @kind object;
}
procedure `a.z` `a`(`a.z$a` v3 @kind this) @signature `La/z$a;.a:()La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08bb7c.  v0:= v3.`a.z$a.a` @type ^`a.x` @kind object;
  #L08bb80.  if v0 != 0 then goto L08bb94;
  #L08bb84.  v0:= new `java.lang.IllegalStateException`;
  #L08bb88.  v1:= "request == null" @kind object;
  #L08bb8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08bb92.  throw v0;
  #L08bb94.  v0:= v3.`a.z$a.b` @type ^`a.v` @kind object;
  #L08bb98.  if v0 != 0 then goto L08bbac;
  #L08bb9c.  v0:= new `java.lang.IllegalStateException`;
  #L08bba0.  v1:= "protocol == null" @kind object;
  #L08bba4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08bbaa.  throw v0;
  #L08bbac.  v0:= v3.`a.z$a.c` @type ^`int`;
  #L08bbb0.  if v0 >= 0 then goto L08bbea;
  #L08bbb4.  v0:= new `java.lang.IllegalStateException`;
  #L08bbb8.  v1:= new `java.lang.StringBuilder`;
  #L08bbbc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08bbc2.  v2:= "code < 0: " @kind object;
  #L08bbc6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08bbcc.  v1:= temp @kind object;
  #L08bbce.  v2:= v3.`a.z$a.c` @type ^`int`;
  #L08bbd2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08bbd8.  v1:= temp @kind object;
  #L08bbda.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08bbe0.  v1:= temp @kind object;
  #L08bbe2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08bbe8.  throw v0;
  #L08bbea.  v0:= new `a.z`;
  #L08bbee.  call `<init>`(v0, v3) @signature `La/z;.<init>:(La/z$a;)V` @kind direct;
  #L08bbf4.  return v0 @kind object;
}
procedure `a.z$a` `b`(`a.z$a` v1 @kind this, `long` v2 ) @signature `La/z$a;.b:(J)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bc08.  v1.`a.z$a.l` @type ^`long` := v2 @kind wide;
  #L08bc0c.  return v1 @kind object;
}
procedure `a.z$a` `b`(`a.z$a` v1 @kind this, `a.z` v2 @kind object) @signature `La/z$a;.b:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bc20.  if v2 == 0 then goto L08bc2e;
  #L08bc24.  v0:= "cacheResponse" @kind object;
  #L08bc28.  call `a`(v1, v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @kind direct;
  #L08bc2e.  v1.`a.z$a.i` @type ^`a.z` := v2 @kind object;
  #L08bc32.  return v1 @kind object;
}
procedure `a.z$a` `c`(`a.z$a` v0 @kind this, `a.z` v1 @kind object) @signature `La/z$a;.c:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08bc44.  if v1 == 0 then goto L08bc4e;
  #L08bc48.  call `d`(v0, v1) @signature `La/z$a;.d:(La/z;)V` @kind direct;
  #L08bc4e.  v0.`a.z$a.j` @type ^`a.z` := v1 @kind object;
  #L08bc52.  return v0 @kind object;
}
