record `a.p` @kind class @AccessFlag PUBLIC_FINAL {
  `a.ac` `a.p.a` @AccessFlag PRIVATE_FINAL;
  `a.h` `a.p.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.p.c` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.p.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.p` v0 @kind this, `a.ac` v1 @kind object, `a.h` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `La/p;.<init>:(La/ac;La/h;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L087ebc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L087ec2.  v0.`a.p.a` @type ^`a.ac` := v1 @kind object;
  #L087ec6.  v0.`a.p.b` @type ^`a.h` := v2 @kind object;
  #L087eca.  v0.`a.p.c` @type ^`java.util.List` := v3 @kind object;
  #L087ece.  v0.`a.p.d` @type ^`java.util.List` := v4 @kind object;
  #L087ed2.  return @kind void;
}
procedure `a.p` `a`(`javax.net.ssl.SSLSession` v5 @kind object) @signature `La/p;.a:(Ljavax/net/ssl/SSLSession;)La/p;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L087ee4.  call temp:= `getCipherSuite`(v5) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L087eea.  v0:= temp @kind object;
  #L087eec.  if v0 != 0 then goto L087f00;
  #L087ef0.  v0:= new `java.lang.IllegalStateException`;
  #L087ef4.  v1:= "cipherSuite == null" @kind object;
  #L087ef8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087efe.  throw v0;
  #L087f00.  call temp:= `a`(v0) @signature `La/h;.a:(Ljava/lang/String;)La/h;` @kind static;
  #L087f06.  v2:= temp @kind object;
  #L087f08.  call temp:= `getProtocol`(v5) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L087f0e.  v0:= temp @kind object;
  #L087f10.  if v0 != 0 then goto L087f24;
  #L087f14.  v0:= new `java.lang.IllegalStateException`;
  #L087f18.  v1:= "tlsVersion == null" @kind object;
  #L087f1c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087f22.  throw v0;
  #L087f24.  call temp:= `a`(v0) @signature `La/ac;.a:(Ljava/lang/String;)La/ac;` @kind static;
  #L087f2a.  v3:= temp @kind object;
  #Try_start0.  
  #L087f2c.  call temp:= `getPeerCertificates`(v5) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #Try_end0.  
  #L087f32.  v0:= temp @kind object;
  #L087f34.  if v0 == 0 then goto L087f66;
  #L087f38.  call temp:= `a`(v0) @signature `La/a/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L087f3e.  v0:= temp @kind object;
  #L087f40.  call temp:= `getLocalCertificates`(v5) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L087f46.  v1:= temp @kind object;
  #L087f48.  if v1 == 0 then goto L087f70;
  #L087f4c.  call temp:= `a`(v1) @signature `La/a/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L087f52.  v1:= temp @kind object;
  #L087f54.  v4:= new `a.p`;
  #L087f58.  call `<init>`(v4, v3, v2, v0, v1) @signature `La/p;.<init>:(La/ac;La/h;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L087f5e.  return v4 @kind object;
  #L087f60.  v0:= Exception @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind object;
  #L087f62.  v0:= 0I;
  #L087f64.  goto L087f34;
  #L087f66.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L087f6c.  v0:= temp @kind object;
  #L087f6e.  goto L087f40;
  #L087f70.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L087f76.  v1:= temp @kind object;
  #L087f78.  goto L087f54;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[Try_start0..Try_end0] goto L087f60;
}
procedure `a.h` `a`(`a.p` v1 @kind this) @signature `La/p;.a:()La/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L087f9c.  v0:= v1.`a.p.b` @type ^`a.h` @kind object;
  #L087fa0.  return v0 @kind object;
}
procedure `java.util.List` `b`(`a.p` v1 @kind this) @signature `La/p;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L087fb4.  v0:= v1.`a.p.c` @type ^`java.util.List` @kind object;
  #L087fb8.  return v0 @kind object;
}
procedure `boolean` `equals`(`a.p` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L087fcc.  v0:= 0I;
  #L087fce.  v1:= instanceof @variable v4 @type ^`a.p` @kind boolean;
  #L087fd2.  if v1 != 0 then goto L087fd8;
  #L087fd6.  return v0;
  #L087fd8.  v4:= (`a.p`) v4 @kind object;
  #L087fdc.  v1:= v3.`a.p.b` @type ^`a.h` @kind object;
  #L087fe0.  v2:= v4.`a.p.b` @type ^`a.h` @kind object;
  #L087fe4.  call temp:= `a`(v1, v2) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L087fea.  v1:= temp;
  #L087fec.  if v1 == 0 then goto L087fd6;
  #L087ff0.  v1:= v3.`a.p.b` @type ^`a.h` @kind object;
  #L087ff4.  v2:= v4.`a.p.b` @type ^`a.h` @kind object;
  #L087ff8.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L087ffe.  v1:= temp;
  #L088000.  if v1 == 0 then goto L087fd6;
  #L088004.  v1:= v3.`a.p.c` @type ^`java.util.List` @kind object;
  #L088008.  v2:= v4.`a.p.c` @type ^`java.util.List` @kind object;
  #L08800c.  call temp:= `equals`(v1, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L088012.  v1:= temp;
  #L088014.  if v1 == 0 then goto L087fd6;
  #L088018.  v1:= v3.`a.p.d` @type ^`java.util.List` @kind object;
  #L08801c.  v2:= v4.`a.p.d` @type ^`java.util.List` @kind object;
  #L088020.  call temp:= `equals`(v1, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L088026.  v1:= temp;
  #L088028.  if v1 == 0 then goto L087fd6;
  #L08802c.  v0:= 1I;
  #L08802e.  goto L087fd6;
}
procedure `int` `hashCode`(`a.p` v2 @kind this) @signature `La/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L088040.  v0:= v2.`a.p.a` @type ^`a.ac` @kind object;
  #L088044.  if v0 == 0 then goto L088090;
  #L088048.  v0:= v2.`a.p.a` @type ^`a.ac` @kind object;
  #L08804c.  call temp:= `hashCode`(v0) @signature `La/ac;.hashCode:()I` @kind virtual;
  #L088052.  v0:= temp;
  #L088054.  v0:= v0 + 527;
  #L088058.  v0:= v0 * 31;
  #L08805c.  v1:= v2.`a.p.b` @type ^`a.h` @kind object;
  #L088060.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L088066.  v1:= temp;
  #L088068.  v0:= v0 + v1 @kind int;
  #L08806a.  v0:= v0 * 31;
  #L08806e.  v1:= v2.`a.p.c` @type ^`java.util.List` @kind object;
  #L088072.  call temp:= `hashCode`(v1) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L088078.  v1:= temp;
  #L08807a.  v0:= v0 + v1 @kind int;
  #L08807c.  v0:= v0 * 31;
  #L088080.  v1:= v2.`a.p.d` @type ^`java.util.List` @kind object;
  #L088084.  call temp:= `hashCode`(v1) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L08808a.  v1:= temp;
  #L08808c.  v0:= v0 + v1 @kind int;
  #L08808e.  return v0;
  #L088090.  v0:= 0I;
  #L088092.  goto L088054;
}
